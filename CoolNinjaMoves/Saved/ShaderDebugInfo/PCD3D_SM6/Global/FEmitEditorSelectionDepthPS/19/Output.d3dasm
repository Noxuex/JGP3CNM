;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0      POS   float   xy  
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Depth                 0    N/A   oDepth    DEPTH   float    YES
;
; shader hash: 7543bd1ce2bd3ed922bb4a08aa0bb8e2
;
; Pipeline Runtime Information: 
;
; Pixel Shader
; DepthOutput=1
; SampleFrequency=0
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Depth                 0                              
;
; Buffer Definitions:
;
; cbuffer _RootShaderParameters
; {
;
;   struct _RootShaderParameters
;   {
;
;       float2 OutputToInputScale;                    ; Offset:   16
;       float2 OutputToInputBias;                     ; Offset:   24
;       uint MaxVisibleClusters;                      ; Offset:   32
;       uint4 PageConstants;                          ; Offset:   48
;   
;   } _RootShaderParameters;                          ; Offset:    0 Size:    64
;
; }
;
; Resource bind info for View_PrimitiveSceneData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for View_InstanceSceneData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for View_InstancePayloadData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _RootShaderParameters             cbuffer      NA          NA     CB0            cb0     1
; View_PrimitiveSceneData           texture  struct         r/o      T0             t0     1
; View_InstanceSceneData            texture  struct         r/o      T1             t1     1
; View_InstancePayloadData          texture  struct         r/o      T2             t2     1
; View_EditorSelectedHitProxyIds    texture     u32         buf      T3             t3     1
; ClusterPageData                   texture    byte         r/o      T4             t4     1
; VisibleClustersSWHW               texture    byte         r/o      T5             t5     1
; MaterialHitProxyTable             texture    byte         r/o      T6             t6     1
; VisBuffer64                       texture     u32          2d      T7             t7     1
;
;
; ViewId state:
;
; Number of inputs: 4, outputs: 0
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%"class.StructuredBuffer<vector<float, 4> >" = type { <4 x float> }
%"class.Buffer<unsigned int>" = type { i32 }
%struct.ByteAddressBuffer = type { i32 }
%"class.Texture2D<unsigned long long>" = type { i64, %"class.Texture2D<unsigned long long>::mips_type" }
%"class.Texture2D<unsigned long long>::mips_type" = type { i32 }
%_RootShaderParameters = type { <2 x float>, <2 x float>, i32, <4 x i32> }

define void @EmitEditorSelectionDepthPS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 13, i32 64 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %11 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %10, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %14 = extractvalue %dx.types.CBufRet.f32 %13, 0
  %15 = extractvalue %dx.types.CBufRet.f32 %13, 1
  %16 = fmul fast float %14, %11
  %17 = fmul fast float %15, %12
  %18 = extractvalue %dx.types.CBufRet.f32 %13, 2
  %19 = extractvalue %dx.types.CBufRet.f32 %13, 3
  %20 = fadd fast float %16, %18
  %21 = fadd fast float %17, %19
  %22 = fptoui float %20 to i32
  %23 = fptoui float %21 to i32
  %24 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %25 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %24, i32 0, i32 %22, i32 %23, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %26 = extractvalue %dx.types.ResRet.i32 %25, 0
  %27 = extractvalue %dx.types.ResRet.i32 %25, 1
  %28 = lshr i32 %26, 7
  %29 = and i32 %26, 127
  %30 = icmp eq i32 %28, 0
  br i1 %30, label %275, label %31

; <label>:31                                      ; preds = %0
  %32 = shl nuw nsw i32 %28, 3
  %33 = add nsw i32 %32, -8
  %34 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %35 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %34, i32 %33, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %36 = extractvalue %dx.types.ResRet.i32 %35, 0
  %37 = extractvalue %dx.types.ResRet.i32 %35, 1
  %38 = lshr i32 %36, 16
  %39 = and i32 %37, 16777215
  %40 = lshr i32 %37, 24
  %41 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %42 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %41, i32 %39, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %43 = extractvalue %dx.types.ResRet.f32 %42, 0
  %44 = bitcast float %43 to i32
  %45 = and i32 %44, 1048575
  %46 = extractvalue %dx.types.ResRet.f32 %42, 1
  %47 = bitcast float %46 to i32
  %48 = and i32 %47, 16777215
  %49 = mul nuw nsw i32 %45, 41
  %50 = add nuw nsw i32 %49, 26
  %51 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %52 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %51, i32 %50, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %53 = extractvalue %dx.types.ResRet.f32 %52, 3
  %54 = bitcast float %53 to i32
  %55 = add nuw nsw i32 %49, 27
  %56 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %51, i32 %55, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %57 = extractvalue %dx.types.ResRet.f32 %56, 3
  %58 = bitcast float %57 to i32
  %59 = mul i32 %58, %48
  %60 = add i32 %59, %54
  %61 = and i32 %44, 134217728
  %62 = icmp eq i32 %60, -1
  %63 = icmp eq i32 %61, 0
  %64 = or i1 %63, %62
  br i1 %64, label %72, label %65, !dx.controlflow.hints !29

; <label>:65                                      ; preds = %31
  %66 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %67 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %66, i32 %60, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %68 = extractvalue %dx.types.ResRet.f32 %67, 1
  %69 = bitcast float %68 to i32
  %70 = icmp ugt i32 %69, 16777215
  %71 = zext i1 %70 to i32
  br label %72

; <label>:72                                      ; preds = %65, %31
  %73 = phi i32 [ %71, %65 ], [ 0, %31 ]
  br i1 %63, label %74, label %275, !dx.controlflow.hints !30

; <label>:74                                      ; preds = %72
  %75 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %10, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %76 = extractvalue %dx.types.CBufRet.i32 %75, 1
  %77 = call i32 @dx.op.binary.i32(i32 40, i32 %38, i32 %76)  ; UMin(a,b)
  %78 = shl i32 %77, 17
  %79 = sub nsw i32 %38, %76
  %80 = call i32 @dx.op.binary.i32(i32 37, i32 %79, i32 0)  ; IMax(a,b)
  %81 = shl i32 %80, 15
  %82 = add i32 %81, %78
  %83 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %84 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %83, i32 %82, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %85 = extractvalue %dx.types.ResRet.i32 %84, 0
  %86 = shl nuw nsw i32 %40, 4
  %87 = or i32 %82, %86
  %88 = mul i32 %85, 80
  %89 = add nsw i32 %87, 16
  %90 = add i32 %89, %88
  %91 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %83, i32 %90, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %92 = extractvalue %dx.types.ResRet.i32 %91, 3
  %93 = icmp ult i32 %92, -33554432
  br i1 %93, label %94, label %104, !dx.controlflow.hints !31

; <label>:94                                      ; preds = %74
  %95 = and i32 %92, 63
  %96 = lshr i32 %92, 6
  %97 = and i32 %96, 63
  %98 = lshr i32 %92, 12
  %99 = and i32 %98, 63
  %100 = lshr i32 %92, 18
  %101 = and i32 %100, 127
  %102 = add nuw nsw i32 %101, 1
  %103 = lshr i32 %92, 25
  br label %110

; <label>:104                                     ; preds = %74
  %105 = lshr i32 %92, 19
  %106 = and i32 %105, 63
  %107 = add nuw nsw i32 %106, 1
  %108 = shl i32 %92, 2
  %109 = and i32 %108, 2097148
  br label %110

; <label>:110                                     ; preds = %104, %94
  %111 = phi i32 [ %99, %94 ], [ 0, %104 ]
  %112 = phi i32 [ %97, %94 ], [ 0, %104 ]
  %113 = phi i32 [ %103, %94 ], [ 0, %104 ]
  %114 = phi i32 [ %95, %94 ], [ 0, %104 ]
  %115 = phi i32 [ %102, %94 ], [ 0, %104 ]
  %116 = phi i32 [ 0, %94 ], [ %107, %104 ]
  %117 = phi i32 [ 0, %94 ], [ %109, %104 ]
  %118 = icmp eq i32 %115, 0
  br i1 %118, label %125, label %119, !dx.controlflow.hints !32

; <label>:119                                     ; preds = %110
  %120 = icmp ult i32 %29, %115
  br i1 %120, label %150, label %121

; <label>:121                                     ; preds = %119
  %122 = add nsw i32 %115, %113
  %123 = icmp ult i32 %29, %122
  %124 = select i1 %123, i32 %112, i32 %111
  br label %150

; <label>:125                                     ; preds = %110
  %126 = icmp eq i32 %116, 0
  br i1 %126, label %150, label %127

; <label>:127                                     ; preds = %125
  %128 = add i32 %117, %82
  br label %129

; <label>:129                                     ; preds = %144, %127
  %130 = phi i32 [ %145, %144 ], [ %128, %127 ]
  %131 = phi i32 [ %146, %144 ], [ 0, %127 ]
  %132 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %133 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %132, i32 %130, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %134 = extractvalue %dx.types.ResRet.i32 %133, 0
  %135 = and i32 %134, 255
  %136 = lshr i32 %134, 8
  %137 = and i32 %136, 255
  %138 = lshr i32 %134, 16
  %139 = and i32 %138, 63
  %140 = icmp uge i32 %29, %135
  %141 = add nuw nsw i32 %137, %135
  %142 = icmp ult i32 %29, %141
  %143 = and i1 %140, %142
  br i1 %143, label %148, label %144

; <label>:144                                     ; preds = %129
  %145 = add i32 %130, 4
  %146 = add nuw i32 %131, 1
  %147 = icmp ult i32 %146, %116
  br i1 %147, label %129, label %148, !llvm.loop !33

; <label>:148                                     ; preds = %144, %129
  %149 = phi i32 [ -1, %144 ], [ %139, %129 ]
  br label %150

; <label>:150                                     ; preds = %148, %125, %121, %119
  %151 = phi i32 [ %114, %119 ], [ -1, %125 ], [ %124, %121 ], [ %149, %148 ]
  %152 = shl nuw nsw i32 %45, 6
  %153 = add nsw i32 %151, %152
  %154 = shl nsw i32 %153, 2
  %155 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %156 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %155, i32 %154, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %157 = extractvalue %dx.types.ResRet.i32 %156, 0
  %158 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %159 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %158, i32 262144, i32 undef)  ; BufferLoad(srv,index,wot)
  %160 = extractvalue %dx.types.ResRet.i32 %159, 0
  %161 = icmp ult i32 %157, %160
  %162 = select i1 %161, i32 0, i32 262144
  %163 = or i32 %162, 131072
  %164 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %158, i32 %163, i32 undef)  ; BufferLoad(srv,index,wot)
  %165 = extractvalue %dx.types.ResRet.i32 %164, 0
  %166 = icmp ult i32 %157, %165
  %167 = select i1 %166, i32 0, i32 131072
  %168 = or i32 %167, %162
  %169 = or i32 %168, 65536
  %170 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %158, i32 %169, i32 undef)  ; BufferLoad(srv,index,wot)
  %171 = extractvalue %dx.types.ResRet.i32 %170, 0
  %172 = icmp ult i32 %157, %171
  %173 = select i1 %172, i32 0, i32 65536
  %174 = or i32 %173, %168
  %175 = or i32 %174, 32768
  %176 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %158, i32 %175, i32 undef)  ; BufferLoad(srv,index,wot)
  %177 = extractvalue %dx.types.ResRet.i32 %176, 0
  %178 = icmp ult i32 %157, %177
  %179 = select i1 %178, i32 0, i32 32768
  %180 = or i32 %179, %174
  %181 = or i32 %180, 16384
  %182 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %158, i32 %181, i32 undef)  ; BufferLoad(srv,index,wot)
  %183 = extractvalue %dx.types.ResRet.i32 %182, 0
  %184 = icmp ult i32 %157, %183
  %185 = select i1 %184, i32 0, i32 16384
  %186 = or i32 %185, %180
  %187 = or i32 %186, 8192
  %188 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %158, i32 %187, i32 undef)  ; BufferLoad(srv,index,wot)
  %189 = extractvalue %dx.types.ResRet.i32 %188, 0
  %190 = icmp ult i32 %157, %189
  %191 = select i1 %190, i32 0, i32 8192
  %192 = or i32 %191, %186
  %193 = or i32 %192, 4096
  %194 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %158, i32 %193, i32 undef)  ; BufferLoad(srv,index,wot)
  %195 = extractvalue %dx.types.ResRet.i32 %194, 0
  %196 = icmp ult i32 %157, %195
  %197 = select i1 %196, i32 0, i32 4096
  %198 = or i32 %197, %192
  %199 = add i32 %198, 2048
  %200 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %158, i32 %199, i32 undef)  ; BufferLoad(srv,index,wot)
  %201 = extractvalue %dx.types.ResRet.i32 %200, 0
  %202 = icmp ult i32 %157, %201
  %203 = select i1 %202, i32 0, i32 2048
  %204 = add i32 %203, %198
  %205 = add i32 %204, 1024
  %206 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %158, i32 %205, i32 undef)  ; BufferLoad(srv,index,wot)
  %207 = extractvalue %dx.types.ResRet.i32 %206, 0
  %208 = icmp ult i32 %157, %207
  %209 = select i1 %208, i32 0, i32 1024
  %210 = add i32 %209, %204
  %211 = add i32 %210, 512
  %212 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %158, i32 %211, i32 undef)  ; BufferLoad(srv,index,wot)
  %213 = extractvalue %dx.types.ResRet.i32 %212, 0
  %214 = icmp ult i32 %157, %213
  %215 = select i1 %214, i32 0, i32 512
  %216 = add i32 %215, %210
  %217 = add i32 %216, 256
  %218 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %158, i32 %217, i32 undef)  ; BufferLoad(srv,index,wot)
  %219 = extractvalue %dx.types.ResRet.i32 %218, 0
  %220 = icmp ult i32 %157, %219
  %221 = select i1 %220, i32 0, i32 256
  %222 = add i32 %221, %216
  %223 = add i32 %222, 128
  %224 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %158, i32 %223, i32 undef)  ; BufferLoad(srv,index,wot)
  %225 = extractvalue %dx.types.ResRet.i32 %224, 0
  %226 = icmp ult i32 %157, %225
  %227 = select i1 %226, i32 0, i32 128
  %228 = add i32 %227, %222
  %229 = add i32 %228, 64
  %230 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %158, i32 %229, i32 undef)  ; BufferLoad(srv,index,wot)
  %231 = extractvalue %dx.types.ResRet.i32 %230, 0
  %232 = icmp ult i32 %157, %231
  %233 = select i1 %232, i32 0, i32 64
  %234 = add i32 %233, %228
  %235 = add i32 %234, 32
  %236 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %158, i32 %235, i32 undef)  ; BufferLoad(srv,index,wot)
  %237 = extractvalue %dx.types.ResRet.i32 %236, 0
  %238 = icmp ult i32 %157, %237
  %239 = select i1 %238, i32 0, i32 32
  %240 = add i32 %239, %234
  %241 = add i32 %240, 16
  %242 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %158, i32 %241, i32 undef)  ; BufferLoad(srv,index,wot)
  %243 = extractvalue %dx.types.ResRet.i32 %242, 0
  %244 = icmp ult i32 %157, %243
  %245 = select i1 %244, i32 0, i32 16
  %246 = add i32 %245, %240
  %247 = add i32 %246, 8
  %248 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %158, i32 %247, i32 undef)  ; BufferLoad(srv,index,wot)
  %249 = extractvalue %dx.types.ResRet.i32 %248, 0
  %250 = icmp ult i32 %157, %249
  %251 = select i1 %250, i32 0, i32 8
  %252 = add i32 %251, %246
  %253 = add i32 %252, 4
  %254 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %158, i32 %253, i32 undef)  ; BufferLoad(srv,index,wot)
  %255 = extractvalue %dx.types.ResRet.i32 %254, 0
  %256 = icmp ult i32 %157, %255
  %257 = select i1 %256, i32 0, i32 4
  %258 = add i32 %257, %252
  %259 = add i32 %258, 2
  %260 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %158, i32 %259, i32 undef)  ; BufferLoad(srv,index,wot)
  %261 = extractvalue %dx.types.ResRet.i32 %260, 0
  %262 = icmp ult i32 %157, %261
  %263 = select i1 %262, i32 0, i32 2
  %264 = add i32 %263, %258
  %265 = add i32 %264, 1
  %266 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %158, i32 %265, i32 undef)  ; BufferLoad(srv,index,wot)
  %267 = extractvalue %dx.types.ResRet.i32 %266, 0
  %268 = icmp uge i32 %157, %267
  %269 = zext i1 %268 to i32
  %270 = add i32 %269, %264
  %271 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %158, i32 %270, i32 undef)  ; BufferLoad(srv,index,wot)
  %272 = extractvalue %dx.types.ResRet.i32 %271, 0
  %273 = icmp eq i32 %272, %157
  %274 = zext i1 %273 to i32
  br label %275

; <label>:275                                     ; preds = %150, %72, %0
  %276 = phi i32 [ %274, %150 ], [ 0, %0 ], [ %73, %72 ]
  %277 = bitcast i32 %27 to float
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %277)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  %278 = icmp eq i32 %276, 0
  br i1 %278, label %279, label %280

; <label>:279                                     ; preds = %275
  call void @dx.op.discard(i32 82, i1 true)  ; Discard(condition)
  br label %280

; <label>:280                                     ; preds = %279, %275
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind
declare void @dx.op.discard(i32, i1) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!18}
!dx.entryPoints = !{!19}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"ps", i32 6, i32 6}
!4 = !{!5, null, !16, null}
!5 = !{!6, !8, !9, !10, !12, !13, !14, !15}
!6 = !{i32 0, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 12, i32 0, !7}
!7 = !{i32 1, i32 16}
!8 = !{i32 1, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 12, i32 0, !7}
!9 = !{i32 2, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 12, i32 0, !7}
!10 = !{i32 3, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 3, i32 1, i32 10, i32 0, !11}
!11 = !{i32 0, i32 5}
!12 = !{i32 4, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 4, i32 1, i32 11, i32 0, null}
!13 = !{i32 5, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 5, i32 1, i32 11, i32 0, null}
!14 = !{i32 6, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 6, i32 1, i32 11, i32 0, null}
!15 = !{i32 7, %"class.Texture2D<unsigned long long>"* undef, !"", i32 0, i32 7, i32 1, i32 2, i32 0, !11}
!16 = !{!17}
!17 = !{i32 0, %_RootShaderParameters* undef, !"", i32 0, i32 0, i32 1, i32 64, null}
!18 = !{[2 x i32] [i32 4, i32 0]}
!19 = !{void ()* @EmitEditorSelectionDepthPS, !"EmitEditorSelectionDepthPS", !20, !4, !28}
!20 = !{!21, !25, null}
!21 = !{!22}
!22 = !{i32 0, !"SV_Position", i8 9, i8 3, !23, i8 4, i32 1, i8 4, i32 0, i8 0, !24}
!23 = !{i32 0}
!24 = !{i32 3, i32 3}
!25 = !{!26}
!26 = !{i32 0, !"SV_Depth", i8 9, i8 17, !23, i8 0, i32 1, i8 1, i32 -1, i8 -1, !27}
!27 = !{i32 3, i32 1}
!28 = !{i32 0, i64 16, i32 5, !23}
!29 = distinct !{!29, !"dx.controlflow.hints", i32 1}
!30 = distinct !{!30, !"dx.controlflow.hints", i32 1}
!31 = distinct !{!31, !"dx.controlflow.hints", i32 1}
!32 = distinct !{!32, !"dx.controlflow.hints", i32 1}
!33 = distinct !{!33, !34}
!34 = !{!"llvm.loop.unroll.disable"}
