;
; Note: shader requires additional functionality:
;       Wave level operations
;
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: a4d86e59c8f79959a5792ebf4679aae1
;
; Pipeline Runtime Information: 
;
; Compute Shader
; NumThreads=(128,1,1)
; WaveSize=32
;
;
; Buffer Definitions:
;
; cbuffer _RootShaderParameters
; {
;
;   struct _RootShaderParameters
;   {
;
;       float DiffuseColorBoost;                      ; Offset:   48
;       float SkylightLeaking;                        ; Offset:   52
;       float SkylightLeakingRoughness;               ; Offset:   56
;       float InvFullSkylightLeakingDistance;         ; Offset:   60
;       uint SampleHeightFog;                         ; Offset:   64
;       uint SurfaceCacheUpdateFrameIndex;            ; Offset:  172
;       uint ReflectionDownsampleFactor;              ; Offset:  272
;       uint2 ReflectionTracingViewSize;              ; Offset:  280
;       uint2 ReflectionTracingBufferSize;            ; Offset:  288
;       float MaxRayIntensity;                        ; Offset:  296
;       float ReflectionSmoothBias;                   ; Offset:  300
;       uint ReflectionPass;                          ; Offset:  304
;       uint UseJitter;                               ; Offset:  308
;       uint UseHighResSurface;                       ; Offset:  312
;       uint CullByDistanceFromCamera;                ; Offset:  480
;       float CompactionTracingEndDistanceFromCamera; ; Offset:  484
;       float CompactionMaxTraceDistance;             ; Offset:  488
;       float RayTracingCullingRadius;                ; Offset:  492
;       float DitheredStartDistanceFactor;            ; Offset:  496
;   
;   } _RootShaderParameters;                          ; Offset:    0 Size:   500
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _RootShaderParameters             cbuffer      NA          NA     CB0            cb0     1
; DownsampledDepth                  texture     f32          2d      T0             t0     1
; TraceHit                          texture     f32          2d      T1             t1     1
; ReflectionTracingTileData         texture     u32         buf      T2             t2     1
; ReflectionTracingTileIndirectArgs   texture     u32         buf      T3             t3     1
; RWCompactedTraceTexelAllocator        UAV     u32         buf      U0             u0     1
; RWCompactedTraceTexelData             UAV     u32         buf      U1             u1     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Texture2D<float>" = type { float, %"class.Texture2D<float>::mips_type" }
%"class.Texture2D<float>::mips_type" = type { i32 }
%"class.Buffer<unsigned int>" = type { i32 }
%"class.RWBuffer<unsigned int>" = type { i32 }
%"class.RWBuffer<vector<unsigned int, 2> >" = type { <2 x i32> }
%_RootShaderParameters = type { float, float, float, float, i32, i32, i32, <2 x i32>, <2 x i32>, float, float, i32, i32, i32, i32, float, float, float, float }

@"\01?SharedGlobalTraceTexelStartOffset@@3IA" = external addrspace(3) global i32, align 4
@"\01?SharedWaveSums@@3PAIA" = external addrspace(3) global [4 x i32], align 4
@"\01?SharedTexelValid@@3PAIA" = external addrspace(3) global [128 x i32], align 4

define void @ReflectionCompactTracesCS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 1 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 13, i32 500 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %9 = call i32 @dx.op.groupId.i32(i32 94, i32 0)  ; GroupId(component)
  %10 = call i32 @dx.op.threadIdInGroup.i32(i32 95, i32 0)  ; ThreadIdInGroup(component)
  %11 = getelementptr [128 x i32], [128 x i32] addrspace(3)* @"\01?SharedTexelValid@@3PAIA", i32 0, i32 %10
  store i32 0, i32 addrspace(3)* %11, align 4, !tbaa !22
  call void @dx.op.barrier(i32 80, i32 9)  ; Barrier(barrierMode)
  %12 = shl i32 %9, 1
  %13 = lshr i32 %10, 6
  %14 = add i32 %13, %12
  %15 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %16 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %15, i32 0, i32 undef)  ; BufferLoad(srv,index,wot)
  %17 = extractvalue %dx.types.ResRet.i32 %16, 0
  %18 = icmp ult i32 %14, %17
  br i1 %18, label %19, label %79

; <label>:19                                      ; preds = %0
  %20 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %21 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %20, i32 %14, i32 undef)  ; BufferLoad(srv,index,wot)
  %22 = extractvalue %dx.types.ResRet.i32 %21, 0
  %23 = lshr i32 %22, 16
  %24 = shl i32 %22, 3
  %25 = and i32 %24, 524280
  %26 = shl nuw nsw i32 %23, 3
  %27 = and i32 %10, 1
  %28 = lshr i32 %10, 1
  %29 = and i32 %28, 1
  %30 = and i32 %28, 2
  %31 = or i32 %30, %27
  %32 = lshr i32 %10, 2
  %33 = and i32 %32, 2
  %34 = or i32 %29, %33
  %35 = and i32 %32, 4
  %36 = or i32 %31, %35
  %37 = lshr i32 %10, 3
  %38 = and i32 %37, 4
  %39 = or i32 %34, %38
  %40 = or i32 %36, %25
  %41 = or i32 %39, %26
  %42 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %8, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %43 = extractvalue %dx.types.CBufRet.i32 %42, 2
  %44 = extractvalue %dx.types.CBufRet.i32 %42, 3
  %45 = icmp ult i32 %40, %43
  %46 = icmp ult i32 %41, %44
  %47 = and i1 %45, %46
  br i1 %47, label %48, label %79

; <label>:48                                      ; preds = %19
  %49 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %50 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %49, i32 0, i32 %40, i32 %41, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %51 = extractvalue %dx.types.ResRet.f32 %50, 0
  %52 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 2, i32 265 })  ; AnnotateHandle(res,props)  resource: Texture2D<F32>
  %53 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %52, i32 0, i32 %40, i32 %41, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %54 = extractvalue %dx.types.ResRet.f32 %53, 0
  %55 = bitcast float %54 to i32
  %56 = icmp slt i32 %55, 0
  %57 = call float @dx.op.unary.f32(i32 6, float %54)  ; FAbs(value)
  %58 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %8, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %59 = extractvalue %dx.types.CBufRet.f32 %58, 2
  %60 = fcmp ule float %51, 0.000000e+00
  %61 = or i1 %60, %56
  br i1 %61, label %79, label %62

; <label>:62                                      ; preds = %48
  %63 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %8, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %64 = extractvalue %dx.types.CBufRet.i32 %63, 0
  %65 = extractvalue %dx.types.CBufRet.f32 %58, 1
  %66 = icmp ne i32 %64, 0
  %67 = fcmp uge float %51, %65
  %68 = and i1 %67, %66
  %69 = fcmp fast ugt float %57, %59
  %70 = or i1 %68, %69
  br i1 %70, label %79, label %71

; <label>:71                                      ; preds = %62
  store i32 1, i32 addrspace(3)* %11, align 4, !tbaa !22
  %72 = and i32 %40, 65535
  %73 = shl i32 %41, 16
  %74 = or i32 %73, %72
  %75 = call i32 @dx.op.legacyF32ToF16(i32 130, float %59)  ; LegacyF32ToF16(value)
  %76 = shl i32 %75, 16
  %77 = call i32 @dx.op.legacyF32ToF16(i32 130, float %57)  ; LegacyF32ToF16(value)
  %78 = or i32 %76, %77
  br label %79

; <label>:79                                      ; preds = %71, %62, %48, %19, %0
  %80 = phi i32 [ 0, %48 ], [ %74, %71 ], [ 0, %19 ], [ 0, %0 ], [ 0, %62 ]
  %81 = phi i32 [ 0, %48 ], [ %78, %71 ], [ 0, %19 ], [ 0, %0 ], [ 0, %62 ]
  %82 = phi i32 [ 0, %48 ], [ 1, %71 ], [ 0, %19 ], [ 0, %0 ], [ 0, %62 ]
  call void @dx.op.barrier(i32 80, i32 9)  ; Barrier(barrierMode)
  %83 = call i32 @dx.op.waveGetLaneCount(i32 112)  ; WaveGetLaneCount()
  %84 = udiv i32 %10, %83
  %85 = call i32 @dx.op.waveGetLaneIndex(i32 111)  ; WaveGetLaneIndex()
  %86 = load i32, i32 addrspace(3)* %11, align 4, !tbaa !22
  %87 = call i32 @dx.op.waveActiveOp.i32(i32 119, i32 %86, i8 0, i8 1)  ; WaveActiveOp(value,op,sop)
  %88 = icmp eq i32 %85, 0
  br i1 %88, label %89, label %91

; <label>:89                                      ; preds = %79
  %90 = getelementptr [4 x i32], [4 x i32] addrspace(3)* @"\01?SharedWaveSums@@3PAIA", i32 0, i32 %84
  store i32 %87, i32 addrspace(3)* %90, align 4, !tbaa !22
  br label %91

; <label>:91                                      ; preds = %89, %79
  call void @dx.op.barrier(i32 80, i32 9)  ; Barrier(barrierMode)
  %92 = icmp eq i32 %84, 0
  %93 = icmp ult i32 %85, 4
  %94 = and i1 %92, %93
  br i1 %94, label %95, label %99

; <label>:95                                      ; preds = %91
  %96 = getelementptr [4 x i32], [4 x i32] addrspace(3)* @"\01?SharedWaveSums@@3PAIA", i32 0, i32 %85
  %97 = load i32, i32 addrspace(3)* %96, align 4, !tbaa !22
  %98 = call i32 @dx.op.wavePrefixOp.i32(i32 121, i32 %97, i8 0, i8 1)  ; WavePrefixOp(value,op,sop)
  store i32 %98, i32 addrspace(3)* %96, align 4, !tbaa !22
  br label %99

; <label>:99                                      ; preds = %95, %91
  call void @dx.op.barrier(i32 80, i32 9)  ; Barrier(barrierMode)
  %100 = getelementptr [4 x i32], [4 x i32] addrspace(3)* @"\01?SharedWaveSums@@3PAIA", i32 0, i32 %84
  %101 = load i32, i32 addrspace(3)* %100, align 4, !tbaa !22
  %102 = call i32 @dx.op.wavePrefixOp.i32(i32 121, i32 %86, i8 0, i8 1)  ; WavePrefixOp(value,op,sop)
  %103 = add i32 %101, %86
  %104 = add i32 %103, %102
  %105 = udiv i32 127, %83
  %106 = icmp eq i32 %84, %105
  %107 = add i32 %83, -1
  %108 = icmp eq i32 %85, %107
  %109 = and i1 %106, %108
  %110 = icmp ne i32 %104, 0
  %111 = and i1 %110, %109
  br i1 %111, label %112, label %115

; <label>:112                                     ; preds = %99
  %113 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 4106, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<U32>
  %114 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %113, i32 0, i32 0, i32 undef, i32 undef, i32 %104)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  store i32 %114, i32 addrspace(3)* @"\01?SharedGlobalTraceTexelStartOffset@@3IA", align 4, !tbaa !22
  br label %115

; <label>:115                                     ; preds = %112, %99
  call void @dx.op.barrier(i32 80, i32 9)  ; Barrier(barrierMode)
  %116 = icmp eq i32 %82, 0
  br i1 %116, label %122, label %117

; <label>:117                                     ; preds = %115
  %118 = load i32, i32 addrspace(3)* @"\01?SharedGlobalTraceTexelStartOffset@@3IA", align 4, !tbaa !22
  %119 = add i32 %104, -1
  %120 = add i32 %119, %118
  %121 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4106, i32 517 })  ; AnnotateHandle(res,props)  resource: RWTypedBuffer<2xU32>
  call void @dx.op.bufferStore.i32(i32 69, %dx.types.Handle %121, i32 %120, i32 undef, i32 %80, i32 %81, i32 %80, i32 %80, i8 15)  ; BufferStore(uav,coord0,coord1,value0,value1,value2,value3,mask)
  br label %122

; <label>:122                                     ; preds = %117, %115
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.groupId.i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadIdInGroup.i32(i32, i32) #0

; Function Attrs: noduplicate nounwind
declare void @dx.op.barrier(i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #2

; Function Attrs: nounwind
declare i32 @dx.op.atomicBinOp.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32) #3

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readnone
declare i32 @dx.op.waveGetLaneIndex(i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.waveGetLaneCount(i32) #0

; Function Attrs: nounwind
declare i32 @dx.op.wavePrefixOp.i32(i32, i32, i8, i8) #3

; Function Attrs: nounwind
declare i32 @dx.op.waveActiveOp.i32(i32, i32, i8, i8) #3

; Function Attrs: nounwind
declare void @dx.op.bufferStore.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i8) #3

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.legacyF32ToF16(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { noduplicate nounwind }
attributes #2 = { nounwind readonly }
attributes #3 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!17}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"cs", i32 6, i32 6}
!4 = !{!5, !12, !15, null}
!5 = !{!6, !8, !9, !11}
!6 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{i32 1, %"class.Texture2D<float>"* undef, !"", i32 0, i32 1, i32 1, i32 2, i32 0, !7}
!9 = !{i32 2, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 2, i32 1, i32 10, i32 0, !10}
!10 = !{i32 0, i32 5}
!11 = !{i32 3, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 3, i32 1, i32 10, i32 0, !10}
!12 = !{!13, !14}
!13 = !{i32 0, %"class.RWBuffer<unsigned int>"* undef, !"", i32 0, i32 0, i32 1, i32 10, i1 false, i1 false, i1 false, !10}
!14 = !{i32 1, %"class.RWBuffer<vector<unsigned int, 2> >"* undef, !"", i32 0, i32 1, i32 1, i32 10, i1 false, i1 false, i1 false, !10}
!15 = !{!16}
!16 = !{i32 0, %_RootShaderParameters* undef, !"", i32 0, i32 0, i32 1, i32 500, null}
!17 = !{void ()* @ReflectionCompactTracesCS, !"ReflectionCompactTracesCS", null, !4, !18}
!18 = !{i32 0, i64 524288, i32 4, !19, i32 11, !20, i32 5, !21}
!19 = !{i32 128, i32 1, i32 1}
!20 = !{i32 32}
!21 = !{i32 0}
!22 = !{!23, !23, i64 0}
!23 = !{!"int", !24, i64 0}
!24 = !{!"omnipotent char", !25, i64 0}
!25 = !{!"Simple C/C++ TBAA"}
