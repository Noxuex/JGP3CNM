;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0      POS   float   xy  
; DISPATCH_NODECOUNT       0   x           1     NONE    uint   x   
; DISPATCH_RESOLUTION      0    yz         1     NONE    uint    y  
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Target                0   xyzw        0   TARGET   float   xyzw
;
; shader hash: 9283e917643701b782cfd00330fc7424
;
; Pipeline Runtime Information: 
;
; Pixel Shader
; DepthOutput=0
; SampleFrequency=0
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
; DISPATCH_NODECOUNT       0        nointerpolation       
; DISPATCH_RESOLUTION      0        nointerpolation       
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Target                0                              
;
; Buffer Definitions:
;
; cbuffer _RootShaderParameters
; {
;
;   struct _RootShaderParameters
;   {
;
;       uint HairTransmittanceBufferMaxCount;         ; Offset:  196
;       uint HairShadowMaskValid;                     ; Offset:  200
;       float4 ShadowChannelMask;                     ; Offset:  208
;   
;   } _RootShaderParameters;                          ; Offset:    0 Size:   224
;
; }
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_TranslatedWorldToSubpixelClip;; Offset:   64
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:  128
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  192
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  256
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  320
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  384
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  448
;       row_major float4x4 View_ViewToClip;           ; Offset:  512
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  576
;       row_major float4x4 View_ClipToView;           ; Offset:  640
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  768
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  832
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  896
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  960
;       float3 View_ViewTilePosition;                 ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_MatrixTilePosition;               ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_ViewForward;                      ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float3 View_ViewUp;                           ; Offset: 1072
;       float PrePadding_View_1084;                   ; Offset: 1084
;       float3 View_ViewRight;                        ; Offset: 1088
;       float PrePadding_View_1100;                   ; Offset: 1100
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_HMDViewNoRollRight;               ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1136
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1152
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1168
;       float PrePadding_View_1180;                   ; Offset: 1180
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1184
;       float PrePadding_View_1196;                   ; Offset: 1196
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1200
;       float PrePadding_View_1212;                   ; Offset: 1212
;       float3 View_RelativePreViewTranslation;       ; Offset: 1216
;       float PrePadding_View_1228;                   ; Offset: 1228
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1232
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1360
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1424
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1488
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1552
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1616
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1680
;       float PrePadding_View_1692;                   ; Offset: 1692
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1696
;       float PrePadding_View_1708;                   ; Offset: 1708
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1712
;       float PrePadding_View_1724;                   ; Offset: 1724
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1728
;       float PrePadding_View_1740;                   ; Offset: 1740
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1744
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1808
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1872
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1936
;       float4 View_TemporalAAJitter;                 ; Offset: 2000
;       float4 View_GlobalClippingPlane;              ; Offset: 2016
;       float2 View_FieldOfViewWideAngles;            ; Offset: 2032
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 2040
;       float4 View_ViewRectMin;                      ; Offset: 2048
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2064
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2080
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2096
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2112
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2128
;       float4 View_ScreenToViewSpace;                ; Offset: 2144
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2160
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2168
;       int View_NumSceneColorMSAASamples;            ; Offset: 2176
;       float View_PreExposure;                       ; Offset: 2180
;       float View_OneOverPreExposure;                ; Offset: 2184
;       float PrePadding_View_2188;                   ; Offset: 2188
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2192
;       float4 View_SpecularOverrideParameter;        ; Offset: 2208
;       float4 View_NormalOverrideParameter;          ; Offset: 2224
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2240
;       float View_PrevFrameGameTime;                 ; Offset: 2248
;       float View_PrevFrameRealTime;                 ; Offset: 2252
;       float View_OutOfBoundsMask;                   ; Offset: 2256
;       float PrePadding_View_2260;                   ; Offset: 2260
;       float PrePadding_View_2264;                   ; Offset: 2264
;       float PrePadding_View_2268;                   ; Offset: 2268
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2272
;       float View_CullingSign;                       ; Offset: 2284
;       float View_NearPlane;                         ; Offset: 2288
;       float View_GameTime;                          ; Offset: 2292
;       float View_RealTime;                          ; Offset: 2296
;       float View_DeltaTime;                         ; Offset: 2300
;       float View_MaterialTextureMipBias;            ; Offset: 2304
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2308
;       uint View_Random;                             ; Offset: 2312
;       uint View_FrameNumber;                        ; Offset: 2316
;       uint View_StateFrameIndexMod8;                ; Offset: 2320
;       uint View_StateFrameIndex;                    ; Offset: 2324
;       uint View_DebugViewModeMask;                  ; Offset: 2328
;       uint View_WorldIsPaused;                      ; Offset: 2332
;       float View_CameraCut;                         ; Offset: 2336
;       float View_UnlitViewmodeMask;                 ; Offset: 2340
;       float PrePadding_View_2344;                   ; Offset: 2344
;       float PrePadding_View_2348;                   ; Offset: 2348
;       float4 View_DirectionalLightColor;            ; Offset: 2352
;       float3 View_DirectionalLightDirection;        ; Offset: 2368
;       float PrePadding_View_2380;                   ; Offset: 2380
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2384
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2416
;       float4 View_TemporalAAParams;                 ; Offset: 2448
;       float4 View_CircleDOFParams;                  ; Offset: 2464
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2480
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2484
;       float View_DepthOfFieldScale;                 ; Offset: 2488
;       float View_DepthOfFieldFocalLength;           ; Offset: 2492
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2496
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2500
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2504
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2508
;       float View_GeneralPurposeTweak;               ; Offset: 2512
;       float View_GeneralPurposeTweak2;              ; Offset: 2516
;       float View_DemosaicVposOffset;                ; Offset: 2520
;       float View_DecalDepthBias;                    ; Offset: 2524
;       float3 View_IndirectLightingColorScale;       ; Offset: 2528
;       float PrePadding_View_2540;                   ; Offset: 2540
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2544
;       float PrePadding_View_2556;                   ; Offset: 2556
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2560
;       float PrePadding_View_2572;                   ; Offset: 2572
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2576
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2608
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2640
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2672
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2704
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2736
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2752
;       float PrePadding_View_2764;                   ; Offset: 2764
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2768
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2784
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2848
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2864
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2868
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2872
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2876
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2880
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2896
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2900
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2904
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2908
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2912
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2916
;       float PrePadding_View_2920;                   ; Offset: 2920
;       float PrePadding_View_2924;                   ; Offset: 2924
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2928
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2940
;       float View_RealTimeReflectionCapture;         ; Offset: 2944
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2948
;       float PrePadding_View_2952;                   ; Offset: 2952
;       float PrePadding_View_2956;                   ; Offset: 2956
;       float4 View_AmbientCubemapTint;               ; Offset: 2960
;       float View_AmbientCubemapIntensity;           ; Offset: 2976
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2980
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2984
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2988
;       float4 View_SkyLightColor;                    ; Offset: 2992
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 3008
;       float View_MobilePreviewMode;                 ; Offset: 3136
;       float View_HMDEyePaddingOffset;               ; Offset: 3140
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3144
;       float View_ShowDecalsMask;                    ; Offset: 3148
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3152
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3156
;       float PrePadding_View_3160;                   ; Offset: 3160
;       float PrePadding_View_3164;                   ; Offset: 3164
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3168
;       int View_StereoPassIndex;                     ; Offset: 3180
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3184
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3280
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3376
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3472
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3568
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3572
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3576
;       int PrePadding_View_3580;                     ; Offset: 3580
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3584
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3600
;       float View_GlobalVolumeDimension;             ; Offset: 3612
;       float View_GlobalVolumeTexelSize;             ; Offset: 3616
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3620
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3624
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3628
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3632
;       float View_NotCoveredMinStepScale;            ; Offset: 3636
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3640
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3644
;       int2 View_CursorPosition;                     ; Offset: 3648
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3656
;       float PrePadding_View_3660;                   ; Offset: 3660
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3664
;       float PrePadding_View_3676;                   ; Offset: 3676
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3680
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3696
;       float2 View_VolumetricFogScreenUVToHistoryVolumeUV;; Offset: 3704
;       float View_VolumetricFogMaxDistance;          ; Offset: 3712
;       float PrePadding_View_3716;                   ; Offset: 3716
;       float PrePadding_View_3720;                   ; Offset: 3720
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3728
;       float PrePadding_View_3740;                   ; Offset: 3740
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3744
;       float PrePadding_View_3756;                   ; Offset: 3756
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3760
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3772
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3776
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3788
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3792
;       float PrePadding_View_3796;                   ; Offset: 3796
;       float PrePadding_View_3800;                   ; Offset: 3800
;       float PrePadding_View_3804;                   ; Offset: 3804
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3808
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3840
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3844
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3848
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3852
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3856
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3860
;       uint PrePadding_View_3864;                    ; Offset: 3864
;       uint PrePadding_View_3868;                    ; Offset: 3868
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3872
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3888
;       float PrePadding_View_3896;                   ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3904
;       float View_OverrideLandscapeLOD;              ; Offset: 3920
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3924
;       float View_MinRoughness;                      ; Offset: 3928
;       float PrePadding_View_3932;                   ; Offset: 3932
;       float4 View_HairRenderInfo;                   ; Offset: 3936
;       uint View_EnableSkyLight;                     ; Offset: 3952
;       uint View_HairRenderInfoBits;                 ; Offset: 3956
;       uint View_HairComponents;                     ; Offset: 3960
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3964
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3968
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3984
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 4000
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 4012
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4016
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4020
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4024
;       int View_PhysicsFieldTargetCount;             ; Offset: 4028
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4032
;       uint View_InstanceSceneDataSOAStride;         ; Offset: 4544
;       uint View_GPUSceneViewId;                     ; Offset: 4548
;       float View_ViewResolutionFraction;            ; Offset: 4552
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4556
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4560
;       uint PrePadding_View_4564;                    ; Offset: 4564
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4568
;       uint PrePadding_View_4572;                    ; Offset: 4572
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4576
;       uint PrePadding_View_4580;                    ; Offset: 4580
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4584
;       uint PrePadding_View_4588;                    ; Offset: 4588
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4592
;       uint PrePadding_View_4596;                    ; Offset: 4596
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4600
;       uint PrePadding_View_4604;                    ; Offset: 4604
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessResource_View_PrimitiveSceneData;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessResource_View_InstanceSceneData; ; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessResource_View_InstancePayloadData;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessResource_View_LightmapSceneData; ; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessResource_View_LTCMatTexture;     ; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessSampler_View_LTCMatSampler;      ; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessResource_View_LTCAmpTexture;     ; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessSampler_View_LTCAmpSampler;      ; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint View_bShadingEnergyConservation;         ; Offset: 5104
;       uint View_bShadingEnergyPreservation;         ; Offset: 5108
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5160
;       uint PrePadding_View_5164;                    ; Offset: 5164
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessResource_View_WaterData;         ; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint PrePadding_View_5208;                    ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5216
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5232
;       float PrePadding_View_5236;                   ; Offset: 5236
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint PrePadding_View_5256;                    ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5264
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       uint BindlessResource_View_EditorVisualizeLevelInstanceIds;; Offset: 5328
;       uint PrePadding_View_5332;                    ; Offset: 5332
;       uint BindlessResource_View_EditorSelectedHitProxyIds;; Offset: 5336
;       uint PrePadding_View_5340;                    ; Offset: 5340
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5344
;       uint PrePadding_View_5348;                    ; Offset: 5348
;       uint PrePadding_View_5352;                    ; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5360
;       float PrePadding_View_5372;                   ; Offset: 5372
;       float3 View_TLASViewTilePosition;             ; Offset: 5376
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5388
;
; }
;
; cbuffer UniformBufferConstants_DeferredLightUniforms
; {
;
;   struct UniformBufferConstants_DeferredLightUniforms
;   {
;
;       float4 DeferredLightUniforms_ShadowMapChannelMask;; Offset:    0
;       float2 DeferredLightUniforms_DistanceFadeMAD; ; Offset:   16
;       float DeferredLightUniforms_ContactShadowLength;; Offset:   24
;       float DeferredLightUniforms_ContactShadowCastingIntensity;; Offset:   28
;       float DeferredLightUniforms_ContactShadowNonCastingIntensity;; Offset:   32
;       float DeferredLightUniforms_VolumetricScatteringIntensity;; Offset:   36
;       uint DeferredLightUniforms_ShadowedBits;      ; Offset:   40
;       uint DeferredLightUniforms_LightingChannelMask;; Offset:   44
;       float3 DeferredLightUniforms_TranslatedWorldPosition;; Offset:   48
;       float DeferredLightUniforms_InvRadius;        ; Offset:   60
;       float3 DeferredLightUniforms_Color;           ; Offset:   64
;       float DeferredLightUniforms_FalloffExponent;  ; Offset:   76
;       float3 DeferredLightUniforms_Direction;       ; Offset:   80
;       float DeferredLightUniforms_SpecularScale;    ; Offset:   92
;       float3 DeferredLightUniforms_Tangent;         ; Offset:   96
;       float DeferredLightUniforms_SourceRadius;     ; Offset:  108
;       float2 DeferredLightUniforms_SpotAngles;      ; Offset:  112
;       float DeferredLightUniforms_SoftSourceRadius; ; Offset:  120
;       float DeferredLightUniforms_SourceLength;     ; Offset:  124
;       float DeferredLightUniforms_RectLightBarnCosAngle;; Offset:  128
;       float DeferredLightUniforms_RectLightBarnLength;; Offset:  132
;       float2 DeferredLightUniforms_RectLightAtlasUVOffset;; Offset:  136
;       float2 DeferredLightUniforms_RectLightAtlasUVScale;; Offset:  144
;       float DeferredLightUniforms_RectLightAtlasMaxLevel;; Offset:  152
;       float DeferredLightUniforms_IESAtlasIndex;    ; Offset:  156
;   
;   } UniformBufferConstants_DeferredLightUniforms;   ; Offset:    0 Size:   160
;
; }
;
; cbuffer UniformBufferConstants_HairStrands
; {
;
;   struct UniformBufferConstants_HairStrands
;   {
;
;       int2 HairStrands_HairTileCountXY;             ; Offset:    0
;       uint HairStrands_MaxSamplePerPixelCount;      ; Offset:    8
;       float HairStrands_HairDualScatteringRoughnessOverride;; Offset:   12
;       int2 HairStrands_HairSampleViewportResolution;; Offset:   16
;       uint HairStrands_bHairTileValid;              ; Offset:   24
;       uint PrePadding_HairStrands_28;               ; Offset:   28
;       float4 HairStrands_HairOnlyDepthHZBParameters;; Offset:   32
;       uint BindlessResource_HairStrands_HairCoverageTexture;; Offset:   48
;       uint PrePadding_HairStrands_52;               ; Offset:   52
;       uint BindlessResource_HairStrands_HairOnlyDepthTexture;; Offset:   56
;       uint PrePadding_HairStrands_60;               ; Offset:   60
;       uint BindlessResource_HairStrands_HairOnlyDepthClosestHZBTexture;; Offset:   64
;       uint PrePadding_HairStrands_68;               ; Offset:   68
;       uint BindlessResource_HairStrands_HairOnlyDepthFurthestHZBTexture;; Offset:   72
;       uint PrePadding_HairStrands_76;               ; Offset:   76
;       uint BindlessSampler_HairStrands_HairOnlyDepthHZBSampler;; Offset:   80
;       uint PrePadding_HairStrands_84;               ; Offset:   84
;       uint BindlessResource_HairStrands_HairSampleOffset;; Offset:   88
;       uint PrePadding_HairStrands_92;               ; Offset:   92
;       uint BindlessResource_HairStrands_HairSampleCount;; Offset:   96
;       uint PrePadding_HairStrands_100;              ; Offset:  100
;       uint BindlessResource_HairStrands_HairSampleData;; Offset:  104
;       uint PrePadding_HairStrands_108;              ; Offset:  108
;       uint BindlessResource_HairStrands_HairSampleCoords;; Offset:  112
;       uint PrePadding_HairStrands_116;              ; Offset:  116
;       uint BindlessResource_HairStrands_HairTileData;; Offset:  120
;       uint PrePadding_HairStrands_124;              ; Offset:  124
;       uint BindlessResource_HairStrands_HairTileCount;; Offset:  128
;   
;   } UniformBufferConstants_HairStrands;             ; Offset:    0 Size:   132
;
; }
;
; Resource bind info for HairStrands_HairSampleData
; {
;
;   struct struct.FPackedHairSample
;   {
;
;       float Depth;                                  ; Offset:    0
;       uint PrimitiveID_MacroGroupID;                ; Offset:    4
;       uint Tangent_Coverage8bit;                    ; Offset:    8
;       uint BaseColor_Roughness;                     ; Offset:   12
;       uint Specular_LightChannels_Backlit;          ; Offset:   16
;   
;   } $Element;                                       ; Offset:    0 Size:    20
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _RootShaderParameters             cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_View       cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_DeferredLightUniforms   cbuffer      NA          NA     CB2            cb2     1
; UniformBufferConstants_HairStrands   cbuffer      NA          NA     CB3            cb3     1
; View_HairScatteringLUTSampler     sampler      NA          NA      S0             s0     1
; View_IESAtlasSampler              sampler      NA          NA      S1             s1     1
; SceneTexturesStruct_PointClampSampler   sampler      NA          NA      S2             s2     1
; View_HairScatteringLUTTexture     texture     f32          3d      T0             t0     1
; View_IESAtlasTexture              texture     f32     2darray      T1             t1     1
; SceneTexturesStruct_SceneDepthTexture   texture     f32          2d      T2             t2     1
; SceneTexturesStruct_GBufferATexture   texture     f32          2d      T3             t3     1
; SceneTexturesStruct_GBufferBTexture   texture     f32          2d      T4             t4     1
; HairStrands_HairSampleData        texture  struct         r/o      T5             t5     1
; HairStrands_HairSampleCoords      texture     u32         buf      T6             t6     1
; ScreenShadowMaskSubPixelTexture   texture     f32          2d      T7             t7     1
; HairTransmittanceBuffer           texture     u32         buf      T8             t8     1
;
;
; ViewId state:
;
; Number of inputs: 7, outputs: 4
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 4, 5 }
;   output 1 depends on inputs: { 0, 1, 4, 5 }
;   output 2 depends on inputs: { 0, 1, 4, 5 }
;   output 3 depends on inputs: { 0, 1, 4, 5 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%"class.Texture3D<vector<float, 4> >" = type { <4 x float>, %"class.Texture3D<vector<float, 4> >::mips_type" }
%"class.Texture3D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Texture2DArray<float>" = type { float, %"class.Texture2DArray<float>::mips_type" }
%"class.Texture2DArray<float>::mips_type" = type { i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.StructuredBuffer<FPackedHairSample>" = type { %struct.FPackedHairSample }
%struct.FPackedHairSample = type { float, i32, i32, i32, i32 }
%"class.Buffer<vector<unsigned int, 2> >" = type { <2 x i32> }
%"class.Buffer<unsigned int>" = type { i32 }
%_RootShaderParameters = type { i32, i32, <4 x float> }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, float, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%UniformBufferConstants_DeferredLightUniforms = type { <4 x float>, <2 x float>, float, float, float, float, i32, i32, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <2 x float>, float, float, float, float, <2 x float>, <2 x float>, float, float }
%UniformBufferConstants_HairStrands = type { <2 x i32>, i32, float, <2 x i32>, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.SamplerState = type { i32 }

define void @DeferredLightPixelMain() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 3 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 2 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 13, i32 160 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %18 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %19 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 13, i32 224 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %20 = call i32 @dx.op.loadInput.i32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %21 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %22 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %23 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %24 = fptoui float %22 to i32
  %25 = fptoui float %23 to i32
  %26 = mul i32 %25, %20
  %27 = add i32 %26, %24
  %28 = icmp ult i32 %27, %21
  br i1 %28, label %29, label %1423

; <label>:29                                      ; preds = %0
  %30 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 13, i32 132 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %31 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 10, i32 517 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<2xU32>
  %32 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %31, i32 %27, i32 undef)  ; BufferLoad(srv,index,wot)
  %33 = extractvalue %dx.types.ResRet.i32 %32, 0
  %34 = extractvalue %dx.types.ResRet.i32 %32, 1
  %35 = uitofp i32 %33 to float
  %36 = uitofp i32 %34 to float
  %37 = fadd fast float %35, 5.000000e-01
  %38 = fadd fast float %36, 5.000000e-01
  %39 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %18, i32 132)  ; CBufferLoadLegacy(handle,regIndex)
  %40 = extractvalue %dx.types.CBufRet.f32 %39, 0
  %41 = extractvalue %dx.types.CBufRet.f32 %39, 1
  %42 = fdiv fast float %37, %40
  %43 = fdiv fast float %38, %41
  %44 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %18, i32 72)  ; CBufferLoadLegacy(handle,regIndex)
  %45 = extractvalue %dx.types.CBufRet.f32 %44, 2
  %46 = extractvalue %dx.types.CBufRet.f32 %44, 3
  %47 = fsub fast float %42, %46
  %48 = fsub fast float %43, %45
  %49 = extractvalue %dx.types.CBufRet.f32 %44, 0
  %50 = extractvalue %dx.types.CBufRet.f32 %44, 1
  %51 = fdiv fast float %47, %49
  %52 = fdiv fast float %48, %50
  %53 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 524, i32 20 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=20>
  %54 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %53, i32 %27, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %55 = extractvalue %dx.types.ResRet.f32 %54, 0
  %56 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %53, i32 %27, i32 8, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %57 = extractvalue %dx.types.ResRet.i32 %56, 0
  %58 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %53, i32 %27, i32 12, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %59 = extractvalue %dx.types.ResRet.i32 %58, 0
  %60 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %53, i32 %27, i32 16, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %61 = extractvalue %dx.types.ResRet.i32 %60, 0
  %62 = and i32 %57, 255
  %63 = uitofp i32 %62 to float
  %64 = lshr i32 %57, 8
  %65 = and i32 %64, 255
  %66 = uitofp i32 %65 to float
  %67 = lshr i32 %57, 16
  %68 = and i32 %67, 255
  %69 = uitofp i32 %68 to float
  %70 = fmul fast float %63, 0x3F80101020000000
  %71 = fmul fast float %66, 0x3F80101020000000
  %72 = fmul fast float %69, 0x3F80101020000000
  %73 = fadd fast float %70, -1.000000e+00
  %74 = fadd fast float %71, -1.000000e+00
  %75 = fadd fast float %72, -1.000000e+00
  %76 = lshr i32 %57, 24
  %77 = and i32 %59, 255
  %78 = lshr i32 %59, 8
  %79 = and i32 %78, 255
  %80 = lshr i32 %59, 16
  %81 = and i32 %80, 255
  %82 = lshr i32 %59, 24
  %83 = uitofp i32 %77 to float
  %84 = uitofp i32 %79 to float
  %85 = uitofp i32 %81 to float
  %86 = uitofp i32 %82 to float
  %87 = fmul fast float %83, 0x3F70101020000000
  %88 = fmul fast float %84, 0x3F70101020000000
  %89 = fmul fast float %85, 0x3F70101020000000
  %90 = fmul fast float %86, 0x3F70101020000000
  %91 = fmul fast float %87, %87
  %92 = fmul fast float %88, %88
  %93 = fmul fast float %89, %89
  %94 = and i32 %61, 255
  %95 = uitofp i32 %94 to float
  %96 = lshr i32 %61, 16
  %97 = and i32 %96, 255
  %98 = uitofp i32 %97 to float
  %99 = fmul fast float %98, 0x3F70101020000000
  %100 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %30, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %101 = extractvalue %dx.types.CBufRet.f32 %100, 3
  %102 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %18, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %103 = extractvalue %dx.types.CBufRet.f32 %102, 0
  %104 = fmul fast float %103, %55
  %105 = extractvalue %dx.types.CBufRet.f32 %102, 1
  %106 = fadd fast float %104, %105
  %107 = extractvalue %dx.types.CBufRet.f32 %102, 2
  %108 = fmul fast float %107, %55
  %109 = extractvalue %dx.types.CBufRet.f32 %102, 3
  %110 = fsub fast float %108, %109
  %111 = fdiv fast float 1.000000e+00, %110
  %112 = fadd fast float %106, %111
  %113 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %18, i32 56)  ; CBufferLoadLegacy(handle,regIndex)
  %114 = extractvalue %dx.types.CBufRet.f32 %113, 0
  %115 = extractvalue %dx.types.CBufRet.f32 %113, 1
  %116 = extractvalue %dx.types.CBufRet.f32 %113, 2
  %117 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %18, i32 57)  ; CBufferLoadLegacy(handle,regIndex)
  %118 = extractvalue %dx.types.CBufRet.f32 %117, 0
  %119 = extractvalue %dx.types.CBufRet.f32 %117, 1
  %120 = extractvalue %dx.types.CBufRet.f32 %117, 2
  %121 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %18, i32 58)  ; CBufferLoadLegacy(handle,regIndex)
  %122 = extractvalue %dx.types.CBufRet.f32 %121, 0
  %123 = extractvalue %dx.types.CBufRet.f32 %121, 1
  %124 = extractvalue %dx.types.CBufRet.f32 %121, 2
  %125 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %18, i32 59)  ; CBufferLoadLegacy(handle,regIndex)
  %126 = extractvalue %dx.types.CBufRet.f32 %125, 0
  %127 = extractvalue %dx.types.CBufRet.f32 %125, 1
  %128 = extractvalue %dx.types.CBufRet.f32 %125, 2
  %129 = fmul fast float %112, %51
  %130 = fmul fast float %112, %52
  %131 = fmul fast float %129, %114
  %132 = call float @dx.op.tertiary.f32(i32 46, float %130, float %118, float %131)  ; FMad(a,b,c)
  %133 = call float @dx.op.tertiary.f32(i32 46, float %112, float %122, float %132)  ; FMad(a,b,c)
  %134 = fadd fast float %133, %126
  %135 = fmul fast float %129, %115
  %136 = call float @dx.op.tertiary.f32(i32 46, float %130, float %119, float %135)  ; FMad(a,b,c)
  %137 = call float @dx.op.tertiary.f32(i32 46, float %112, float %123, float %136)  ; FMad(a,b,c)
  %138 = fadd fast float %137, %127
  %139 = fmul fast float %129, %116
  %140 = call float @dx.op.tertiary.f32(i32 46, float %130, float %120, float %139)  ; FMad(a,b,c)
  %141 = call float @dx.op.tertiary.f32(i32 46, float %112, float %124, float %140)  ; FMad(a,b,c)
  %142 = fadd fast float %141, %128
  %143 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %18, i32 74)  ; CBufferLoadLegacy(handle,regIndex)
  %144 = extractvalue %dx.types.CBufRet.f32 %143, 0
  %145 = extractvalue %dx.types.CBufRet.f32 %143, 1
  %146 = extractvalue %dx.types.CBufRet.f32 %143, 2
  %147 = fsub fast float %134, %144
  %148 = fsub fast float %138, %145
  %149 = fsub fast float %142, %146
  %150 = call float @dx.op.dot3.f32(i32 55, float %147, float %148, float %149, float %147, float %148, float %149)  ; Dot3(ax,ay,az,bx,by,bz)
  %151 = call float @dx.op.unary.f32(i32 25, float %150)  ; Rsqrt(value)
  %152 = fmul fast float %147, %151
  %153 = fmul fast float %148, %151
  %154 = fmul fast float %149, %151
  %155 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %17, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %156 = extractvalue %dx.types.CBufRet.f32 %155, 0
  %157 = extractvalue %dx.types.CBufRet.f32 %155, 1
  %158 = extractvalue %dx.types.CBufRet.f32 %155, 2
  %159 = extractvalue %dx.types.CBufRet.f32 %155, 3
  %160 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %17, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %161 = extractvalue %dx.types.CBufRet.f32 %160, 0
  %162 = extractvalue %dx.types.CBufRet.f32 %160, 1
  %163 = extractvalue %dx.types.CBufRet.f32 %160, 2
  %164 = extractvalue %dx.types.CBufRet.f32 %160, 3
  %165 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %17, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %166 = extractvalue %dx.types.CBufRet.f32 %165, 0
  %167 = extractvalue %dx.types.CBufRet.f32 %165, 1
  %168 = extractvalue %dx.types.CBufRet.f32 %165, 2
  %169 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %17, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %170 = extractvalue %dx.types.CBufRet.f32 %169, 0
  %171 = extractvalue %dx.types.CBufRet.f32 %169, 1
  %172 = extractvalue %dx.types.CBufRet.f32 %169, 2
  %173 = extractvalue %dx.types.CBufRet.f32 %169, 3
  %174 = fsub fast float -0.000000e+00, %173
  %175 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %17, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %176 = extractvalue %dx.types.CBufRet.f32 %175, 3
  %177 = fsub fast float -0.000000e+00, %176
  %178 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %17, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %179 = extractvalue %dx.types.CBufRet.f32 %178, 2
  %180 = call float @dx.op.unary.f32(i32 6, float %179)  ; FAbs(value)
  %181 = fcmp fast olt float %179, 0.000000e+00
  %182 = extractvalue %dx.types.CBufRet.f32 %178, 3
  %183 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %17, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %184 = extractvalue %dx.types.CBufRet.f32 %183, 0
  %185 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %17, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %186 = extractvalue %dx.types.CBufRet.f32 %185, 0
  %187 = extractvalue %dx.types.CBufRet.f32 %185, 1
  %188 = extractvalue %dx.types.CBufRet.f32 %185, 2
  %189 = extractvalue %dx.types.CBufRet.f32 %185, 3
  %190 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %17, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %191 = extractvalue %dx.types.CBufRet.i32 %190, 2
  %192 = fcmp fast oeq float %164, 0.000000e+00
  %193 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %17, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %194 = extractvalue %dx.types.CBufRet.f32 %193, 0
  %195 = extractvalue %dx.types.CBufRet.f32 %193, 1
  %196 = fsub fast float %156, %134
  %197 = fsub fast float %157, %138
  %198 = fsub fast float %158, %142
  %199 = call float @dx.op.dot3.f32(i32 55, float %196, float %197, float %198, float %196, float %197, float %198)  ; Dot3(ax,ay,az,bx,by,bz)
  %200 = call float @dx.op.unary.f32(i32 25, float %199)  ; Rsqrt(value)
  %201 = fmul fast float %200, %196
  %202 = fmul fast float %200, %197
  %203 = fmul fast float %200, %198
  %204 = fsub fast float -0.000000e+00, %152
  %205 = fsub fast float -0.000000e+00, %153
  %206 = fsub fast float -0.000000e+00, %154
  %207 = call float @dx.op.dot3.f32(i32 55, float %204, float %205, float %206, float %204, float %205, float %206)  ; Dot3(ax,ay,az,bx,by,bz)
  %208 = call float @dx.op.unary.f32(i32 25, float %207)  ; Rsqrt(value)
  %209 = fmul fast float %208, %204
  %210 = fmul fast float %208, %205
  %211 = fmul fast float %208, %206
  %212 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %18, i32 247)  ; CBufferLoadLegacy(handle,regIndex)
  %213 = extractvalue %dx.types.CBufRet.i32 %212, 2
  %214 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %19, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %215 = extractvalue %dx.types.CBufRet.i32 %214, 1
  %216 = icmp ult i32 %27, %215
  br i1 %216, label %217, label %227

; <label>:217                                     ; preds = %29
  %218 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %219 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %218, i32 %27, i32 undef)  ; BufferLoad(srv,index,wot)
  %220 = extractvalue %dx.types.ResRet.i32 %219, 0
  %221 = and i32 %220, 16777215
  %222 = uitofp i32 %221 to float
  %223 = fmul fast float %222, 0x3F50624DE0000000
  %224 = lshr i32 %220, 24
  %225 = uitofp i32 %224 to float
  %226 = fmul fast float %225, 0x3F70101020000000
  br label %227

; <label>:227                                     ; preds = %217, %29
  %228 = phi float [ %226, %217 ], [ 1.000000e+00, %29 ]
  %229 = phi float [ %223, %217 ], [ 0.000000e+00, %29 ]
  %230 = fcmp fast ogt float %101, 0.000000e+00
  %231 = select i1 %230, float %101, float %90
  %232 = call float @dx.op.dot3.f32(i32 55, float %201, float %202, float %203, float %73, float %74, float %75)  ; Dot3(ax,ay,az,bx,by,bz)
  %233 = call float @dx.op.unary.f32(i32 24, float %91)  ; Sqrt(value)
  %234 = call float @dx.op.unary.f32(i32 24, float %92)  ; Sqrt(value)
  %235 = call float @dx.op.unary.f32(i32 24, float %93)  ; Sqrt(value)
  %236 = call float @dx.op.unary.f32(i32 6, float %232)  ; FAbs(value)
  %237 = call float @dx.op.unary.f32(i32 7, float %236)  ; Saturate(value)
  %238 = call float @dx.op.unary.f32(i32 7, float %231)  ; Saturate(value)
  %239 = call float @dx.op.unary.f32(i32 7, float %233)  ; Saturate(value)
  %240 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %241 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %242 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %240, %dx.types.Handle %241, float %237, float %238, float %239, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %243 = extractvalue %dx.types.ResRet.f32 %242, 0
  %244 = extractvalue %dx.types.ResRet.f32 %242, 1
  %245 = call float @dx.op.unary.f32(i32 7, float %234)  ; Saturate(value)
  %246 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %240, %dx.types.Handle %241, float %237, float %238, float %245, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %247 = extractvalue %dx.types.ResRet.f32 %246, 0
  %248 = extractvalue %dx.types.ResRet.f32 %246, 1
  %249 = call float @dx.op.unary.f32(i32 7, float %235)  ; Saturate(value)
  %250 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %240, %dx.types.Handle %241, float %237, float %238, float %249, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %251 = extractvalue %dx.types.ResRet.f32 %250, 0
  %252 = extractvalue %dx.types.ResRet.f32 %250, 1
  %253 = call float @dx.op.dot3.f32(i32 55, float %73, float %74, float %75, float %201, float %202, float %203)  ; Dot3(ax,ay,az,bx,by,bz)
  %254 = call float @dx.op.binary.f32(i32 35, float %253, float -1.000000e+00)  ; FMax(a,b)
  %255 = call float @dx.op.binary.f32(i32 36, float %254, float 1.000000e+00)  ; FMin(a,b)
  %256 = call float @dx.op.dot3.f32(i32 55, float %73, float %74, float %75, float %209, float %210, float %211)  ; Dot3(ax,ay,az,bx,by,bz)
  %257 = call float @dx.op.binary.f32(i32 35, float %256, float -1.000000e+00)  ; FMax(a,b)
  %258 = call float @dx.op.binary.f32(i32 36, float %257, float 1.000000e+00)  ; FMin(a,b)
  %259 = call float @dx.op.binary.f32(i32 36, float 0x3FEFAE1480000000, float %243)  ; FMin(a,b)
  %260 = call float @dx.op.binary.f32(i32 36, float 0x3FEFAE1480000000, float %247)  ; FMin(a,b)
  %261 = call float @dx.op.binary.f32(i32 36, float 0x3FEFAE1480000000, float %251)  ; FMin(a,b)
  %262 = fmul fast float %259, %259
  %263 = fmul fast float %260, %260
  %264 = fmul fast float %261, %261
  %265 = call float @dx.op.binary.f32(i32 36, float 0x3FEFAE1480000000, float %244)  ; FMin(a,b)
  %266 = call float @dx.op.binary.f32(i32 36, float 0x3FEFAE1480000000, float %248)  ; FMin(a,b)
  %267 = call float @dx.op.binary.f32(i32 36, float 0x3FEFAE1480000000, float %252)  ; FMin(a,b)
  %268 = fmul fast float %265, %265
  %269 = fmul fast float %266, %266
  %270 = fmul fast float %267, %267
  %271 = fsub fast float 1.000000e+00, %262
  %272 = fsub fast float 1.000000e+00, %263
  %273 = fsub fast float 1.000000e+00, %264
  %274 = fmul fast float %265, %262
  %275 = fmul fast float %266, %263
  %276 = fmul fast float %267, %264
  %277 = fdiv fast float %274, %271
  %278 = fdiv fast float %275, %272
  %279 = fdiv fast float %276, %273
  %280 = fmul fast float %274, %268
  %281 = fmul fast float %275, %269
  %282 = fmul fast float %276, %270
  %283 = fmul fast float %271, %271
  %284 = fmul fast float %272, %272
  %285 = fmul fast float %273, %273
  %286 = fmul fast float %283, %271
  %287 = fmul fast float %284, %272
  %288 = fmul fast float %285, %273
  %289 = fdiv fast float %280, %286
  %290 = fdiv fast float %281, %287
  %291 = fdiv fast float %282, %288
  %292 = fadd fast float %289, %277
  %293 = fadd fast float %290, %278
  %294 = fadd fast float %291, %279
  %295 = call float @dx.op.binary.f32(i32 35, float %231, float 0x3FC70A3D80000000)  ; FMax(a,b)
  %296 = call float @dx.op.binary.f32(i32 36, float %295, float 0x3FE3333340000000)  ; FMin(a,b)
  %297 = fmul fast float %296, %296
  %298 = fmul fast float %296, 5.000000e-01
  %299 = fmul fast float %298, %298
  %300 = fmul fast float %296, 2.000000e+00
  %301 = fmul fast float %300, %300
  %302 = fadd fast float %229, -1.000000e+00
  %303 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %302)  ; FMax(a,b)
  %304 = fadd fast float %260, %259
  %305 = fadd fast float %304, %261
  %306 = fdiv fast float %259, %305
  %307 = fdiv fast float %260, %305
  %308 = fdiv fast float %261, %305
  %309 = call float @dx.op.dot3.f32(i32 55, float %297, float %299, float %301, float %306, float %307, float %308)  ; Dot3(ax,ay,az,bx,by,bz)
  %310 = fmul fast float %309, %309
  %311 = call float @dx.op.binary.f32(i32 35, float 1.000000e+00, float %303)  ; FMax(a,b)
  %312 = fmul fast float %310, %311
  %313 = call float @dx.op.unary.f32(i32 16, float %255)  ; Asin(value)
  %314 = call float @dx.op.unary.f32(i32 16, float %258)  ; Asin(value)
  %315 = fadd fast float %314, %313
  %316 = fmul fast float %315, 5.000000e-01
  %317 = fmul fast float %315, -2.500000e-01
  %318 = fmul fast float %317, %316
  %319 = fdiv fast float %318, %312
  %320 = fmul fast float %319, 0x3FF7154760000000
  %321 = call float @dx.op.unary.f32(i32 21, float %320)  ; Exp(value)
  %322 = call float @dx.op.unary.f32(i32 23, float %243)  ; Log(value)
  %323 = call float @dx.op.unary.f32(i32 23, float %247)  ; Log(value)
  %324 = call float @dx.op.unary.f32(i32 23, float %251)  ; Log(value)
  %325 = fmul fast float %322, %303
  %326 = fmul fast float %323, %303
  %327 = fmul fast float %324, %303
  %328 = call float @dx.op.unary.f32(i32 21, float %325)  ; Exp(value)
  %329 = call float @dx.op.unary.f32(i32 21, float %326)  ; Exp(value)
  %330 = call float @dx.op.unary.f32(i32 21, float %327)  ; Exp(value)
  %331 = call float @dx.op.dot3.f32(i32 55, float 0xBFB1EB8520000000, float 0x3FA1EB8520000000, float 0x3FC1EB8520000000, float %306, float %307, float %308)  ; Dot3(ax,ay,az,bx,by,bz)
  %332 = fmul fast float %268, 2.000000e+00
  %333 = fmul fast float %269, 2.000000e+00
  %334 = fmul fast float %270, 2.000000e+00
  %335 = fdiv fast float %332, %283
  %336 = fdiv fast float %333, %284
  %337 = fdiv fast float %334, %285
  %338 = fsub fast float 1.000000e+00, %335
  %339 = fsub fast float 1.000000e+00, %336
  %340 = fsub fast float 1.000000e+00, %337
  %341 = fmul fast float %283, 2.000000e+00
  %342 = fmul fast float %284, 2.000000e+00
  %343 = fmul fast float %285, 2.000000e+00
  %344 = fmul fast float %262, 4.000000e+00
  %345 = fmul fast float %263, 4.000000e+00
  %346 = fmul fast float %264, 4.000000e+00
  %347 = fmul fast float %344, %268
  %348 = fmul fast float %345, %269
  %349 = fmul fast float %346, %270
  %350 = fadd fast float %347, %341
  %351 = fadd fast float %348, %342
  %352 = fadd fast float %349, %343
  %353 = fmul fast float %331, %331
  %354 = fmul fast float %353, %350
  %355 = fmul fast float %354, %338
  %356 = fmul fast float %353, %351
  %357 = fmul fast float %356, %339
  %358 = fmul fast float %353, %352
  %359 = fmul fast float %358, %340
  %360 = fdiv fast float %355, %286
  %361 = fdiv fast float %357, %287
  %362 = fdiv fast float %359, %288
  %363 = fadd fast float %266, %265
  %364 = fadd fast float %363, %267
  %365 = fdiv fast float %265, %364
  %366 = fdiv fast float %266, %364
  %367 = fdiv fast float %267, %364
  %368 = call float @dx.op.dot3.f32(i32 55, float %297, float %299, float %301, float %365, float %366, float %367)  ; Dot3(ax,ay,az,bx,by,bz)
  %369 = fmul fast float %368, %368
  %370 = fmul fast float %262, 0x3FE6666660000000
  %371 = fmul fast float %263, 0x3FE6666660000000
  %372 = fmul fast float %264, 0x3FE6666660000000
  %373 = fadd fast float %370, 1.000000e+00
  %374 = fadd fast float %371, 1.000000e+00
  %375 = fadd fast float %372, 1.000000e+00
  %376 = fmul fast float %310, 2.000000e+00
  %377 = fadd fast float %369, %376
  %378 = call float @dx.op.unary.f32(i32 24, float %377)  ; Sqrt(value)
  %379 = fmul fast float %378, %268
  %380 = fmul fast float %378, %269
  %381 = fmul fast float %378, %270
  %382 = fadd fast float %379, %378
  %383 = fadd fast float %380, %378
  %384 = fadd fast float %381, %378
  %385 = fmul fast float %373, %265
  %386 = fmul fast float %385, %382
  %387 = fmul fast float %374, %266
  %388 = fmul fast float %387, %383
  %389 = fmul fast float %375, %267
  %390 = fmul fast float %389, %384
  %391 = fmul fast float %268, %265
  %392 = fmul fast float %269, %266
  %393 = fmul fast float %270, %267
  %394 = fmul fast float %309, 2.000000e+00
  %395 = fmul fast float %368, 3.000000e+00
  %396 = fadd fast float %395, %394
  %397 = fmul fast float %391, %396
  %398 = fmul fast float %392, %396
  %399 = fmul fast float %393, %396
  %400 = fadd fast float %397, %265
  %401 = fadd fast float %398, %266
  %402 = fadd fast float %399, %267
  %403 = fdiv fast float %386, %400
  %404 = fdiv fast float %388, %401
  %405 = fdiv fast float %390, %402
  %406 = fmul fast float %403, %403
  %407 = fmul fast float %404, %404
  %408 = fmul fast float %405, %405
  %409 = fsub fast float %316, %360
  %410 = fadd fast float %406, %312
  %411 = fmul fast float %409, %409
  %412 = fmul fast float %411, -5.000000e-01
  %413 = fdiv fast float %412, %410
  %414 = fmul fast float %413, 0x3FF7154760000000
  %415 = call float @dx.op.unary.f32(i32 21, float %414)  ; Exp(value)
  %416 = fsub fast float %316, %361
  %417 = fadd fast float %407, %312
  %418 = fmul fast float %416, %416
  %419 = fmul fast float %418, -5.000000e-01
  %420 = fdiv fast float %419, %417
  %421 = fmul fast float %420, 0x3FF7154760000000
  %422 = call float @dx.op.unary.f32(i32 21, float %421)  ; Exp(value)
  %423 = fsub fast float %316, %362
  %424 = fadd fast float %408, %312
  %425 = fmul fast float %423, %423
  %426 = fmul fast float %425, -5.000000e-01
  %427 = fdiv fast float %426, %424
  %428 = fmul fast float %427, 0x3FF7154760000000
  %429 = call float @dx.op.unary.f32(i32 21, float %428)  ; Exp(value)
  %430 = call float @dx.op.unary.f32(i32 7, float %303)  ; Saturate(value)
  %431 = fmul fast float %321, 0x3FCC8543C0000000
  %432 = fmul fast float %431, %328
  %433 = fmul fast float %431, %329
  %434 = fmul fast float %431, %330
  %435 = fadd fast float %432, -1.000000e+00
  %436 = fadd fast float %433, -1.000000e+00
  %437 = fadd fast float %434, -1.000000e+00
  %438 = fmul fast float %430, %435
  %439 = fmul fast float %430, %436
  %440 = fmul fast float %430, %437
  %441 = fadd fast float %438, 1.000000e+00
  %442 = fadd fast float %439, 1.000000e+00
  %443 = fadd fast float %440, 1.000000e+00
  %444 = fmul fast float %292, 0x3FDC8543C0000000
  %445 = fmul fast float %444, %415
  %446 = fmul fast float %293, 0x3FDC8543C0000000
  %447 = fmul fast float %446, %422
  %448 = fmul fast float %294, 0x3FDC8543C0000000
  %449 = fmul fast float %448, %429
  %450 = and i32 %213, 16
  %451 = icmp ne i32 %450, 0
  %452 = and i32 %213, 8
  %453 = icmp ne i32 %452, 0
  %454 = select i1 %453, float %445, float 0.000000e+00
  %455 = select i1 %453, float %447, float 0.000000e+00
  %456 = select i1 %453, float %449, float 0.000000e+00
  %457 = and i32 %213, 64
  %458 = icmp eq i32 %457, 0
  %459 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %18, i32 145)  ; CBufferLoadLegacy(handle,regIndex)
  %460 = extractvalue %dx.types.CBufRet.i32 %459, 0
  %461 = uitofp i32 %460 to float
  %462 = fmul fast float %461, 0x4040551EC0000000
  %463 = fmul fast float %461, 0x4027A147A0000000
  %464 = fadd fast float %462, %35
  %465 = fadd fast float %463, %36
  %466 = call float @dx.op.dot2.f32(i32 54, float %464, float %465, float 0x3FB12E2860000000, float 0x3F77E8B200000000)  ; Dot2(ax,ay,bx,by)
  %467 = call float @dx.op.unary.f32(i32 22, float %466)  ; Frc(value)
  %468 = fmul fast float %467, 0x404A7DD040000000
  %469 = call float @dx.op.unary.f32(i32 22, float %468)  ; Frc(value)
  %470 = extractvalue %dx.types.CBufRet.i32 %214, 2
  %471 = icmp eq i32 %470, 0
  br i1 %471, label %479, label %472

; <label>:472                                     ; preds = %227
  %473 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %474 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %473, i32 0, i32 %33, i32 %34, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %475 = extractvalue %dx.types.ResRet.f32 %474, 0
  %476 = extractvalue %dx.types.ResRet.f32 %474, 1
  %477 = extractvalue %dx.types.ResRet.f32 %474, 2
  %478 = extractvalue %dx.types.ResRet.f32 %474, 3
  br label %479

; <label>:479                                     ; preds = %472, %227
  %480 = phi float [ %475, %472 ], [ 1.000000e+00, %227 ]
  %481 = phi float [ %476, %472 ], [ 1.000000e+00, %227 ]
  %482 = phi float [ %477, %472 ], [ 1.000000e+00, %227 ]
  %483 = phi float [ %478, %472 ], [ 1.000000e+00, %227 ]
  %484 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %19, i32 13)  ; CBufferLoadLegacy(handle,regIndex)
  %485 = extractvalue %dx.types.CBufRet.f32 %484, 0
  %486 = extractvalue %dx.types.CBufRet.f32 %484, 1
  %487 = extractvalue %dx.types.CBufRet.f32 %484, 2
  %488 = extractvalue %dx.types.CBufRet.f32 %484, 3
  %489 = fcmp fast olt float %485, 1.000000e+00
  %490 = fcmp fast olt float %486, 1.000000e+00
  %491 = fcmp fast olt float %487, 1.000000e+00
  %492 = fcmp fast olt float %488, 1.000000e+00
  %493 = or i1 %489, %490
  %494 = or i1 %491, %493
  %495 = or i1 %492, %494
  br i1 %495, label %496, label %498

; <label>:496                                     ; preds = %479
  %497 = call float @dx.op.dot4.f32(i32 56, float %480, float %481, float %482, float %483, float %485, float %486, float %487, float %488)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  br label %498

; <label>:498                                     ; preds = %496, %479
  %499 = phi float [ %497, %496 ], [ %482, %479 ]
  %500 = phi float [ %497, %496 ], [ %483, %479 ]
  %501 = call float @dx.op.binary.f32(i32 36, float %499, float %228)  ; FMin(a,b)
  %502 = call float @dx.op.binary.f32(i32 36, float %500, float %228)  ; FMin(a,b)
  br i1 %192, label %503, label %510

; <label>:503                                     ; preds = %498
  %504 = fmul fast float %159, %159
  %505 = fmul fast float %504, %199
  %506 = fmul fast float %505, %505
  %507 = fsub fast float 1.000000e+00, %506
  %508 = call float @dx.op.unary.f32(i32 7, float %507)  ; Saturate(value)
  %509 = fmul fast float %508, %508
  br label %520

; <label>:510                                     ; preds = %498
  %511 = fmul fast float %196, %159
  %512 = fmul fast float %197, %159
  %513 = fmul fast float %198, %159
  %514 = call float @dx.op.dot3.f32(i32 55, float %511, float %512, float %513, float %511, float %512, float %513)  ; Dot3(ax,ay,az,bx,by,bz)
  %515 = call float @dx.op.unary.f32(i32 7, float %514)  ; Saturate(value)
  %516 = fsub fast float 1.000000e+00, %515
  %517 = call float @dx.op.unary.f32(i32 23, float %516)  ; Log(value)
  %518 = fmul fast float %517, %164
  %519 = call float @dx.op.unary.f32(i32 21, float %518)  ; Exp(value)
  br label %520

; <label>:520                                     ; preds = %510, %503
  %521 = phi float [ %509, %503 ], [ %519, %510 ]
  %522 = call float @dx.op.dot3.f32(i32 55, float %166, float %167, float %168, float %201, float %202, float %203)  ; Dot3(ax,ay,az,bx,by,bz)
  %523 = fcmp fast olt float %522, 0.000000e+00
  %524 = select i1 %523, float 0.000000e+00, float %521
  %525 = fmul fast float %524, %161
  %526 = fmul fast float %524, %162
  %527 = fmul fast float %524, %163
  %528 = fcmp fast ogt float %524, 0.000000e+00
  br i1 %528, label %529, label %1349, !dx.controlflow.hints !41

; <label>:529                                     ; preds = %520
  %530 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %18, i32 41)  ; CBufferLoadLegacy(handle,regIndex)
  %531 = extractvalue %dx.types.CBufRet.f32 %530, 1
  %532 = fmul fast float %531, %112
  %533 = icmp eq i32 %191, 0
  br i1 %533, label %548, label %534, !dx.controlflow.hints !42

; <label>:534                                     ; preds = %529
  %535 = call float @dx.op.dot4.f32(i32 56, float %186, float %187, float %188, float %189, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %536 = call float @dx.op.dot4.f32(i32 56, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float %186, float %187, float %188, float %189)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %537 = fadd fast float %536, -1.000000e+00
  %538 = fmul fast float %537, %535
  %539 = fadd fast float %538, 1.000000e+00
  %540 = fmul fast float %539, %501
  %541 = fmul fast float %539, %502
  %542 = icmp ugt i32 %191, 1
  %543 = fcmp fast ogt float %180, 0.000000e+00
  %544 = and i1 %543, %542
  br i1 %544, label %545, label %548

; <label>:545                                     ; preds = %534
  %546 = select i1 %181, float 1.000000e+00, float %532
  %547 = fmul fast float %546, %180
  br label %548

; <label>:548                                     ; preds = %545, %534, %529
  %549 = phi float [ %541, %545 ], [ %541, %534 ], [ 1.000000e+00, %529 ]
  %550 = phi float [ %540, %545 ], [ %540, %534 ], [ 1.000000e+00, %529 ]
  %551 = phi float [ %547, %545 ], [ 0.000000e+00, %534 ], [ 0.000000e+00, %529 ]
  %552 = icmp ult i32 %191, 2
  %553 = fmul fast float %532, 0x3FC99999A0000000
  %554 = select i1 %552, float %553, float %551
  %555 = fcmp fast ogt float %554, 0.000000e+00
  br i1 %555, label %556, label %828, !dx.controlflow.hints !43

; <label>:556                                     ; preds = %548
  %557 = fadd fast float %469, -5.000000e-01
  %558 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %18, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %559 = extractvalue %dx.types.CBufRet.f32 %558, 0
  %560 = extractvalue %dx.types.CBufRet.f32 %558, 1
  %561 = extractvalue %dx.types.CBufRet.f32 %558, 2
  %562 = extractvalue %dx.types.CBufRet.f32 %558, 3
  %563 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %18, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %564 = extractvalue %dx.types.CBufRet.f32 %563, 0
  %565 = extractvalue %dx.types.CBufRet.f32 %563, 1
  %566 = extractvalue %dx.types.CBufRet.f32 %563, 2
  %567 = extractvalue %dx.types.CBufRet.f32 %563, 3
  %568 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %18, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %569 = extractvalue %dx.types.CBufRet.f32 %568, 0
  %570 = extractvalue %dx.types.CBufRet.f32 %568, 1
  %571 = extractvalue %dx.types.CBufRet.f32 %568, 2
  %572 = extractvalue %dx.types.CBufRet.f32 %568, 3
  %573 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %18, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %574 = extractvalue %dx.types.CBufRet.f32 %573, 0
  %575 = extractvalue %dx.types.CBufRet.f32 %573, 1
  %576 = extractvalue %dx.types.CBufRet.f32 %573, 2
  %577 = extractvalue %dx.types.CBufRet.f32 %573, 3
  %578 = fmul fast float %559, %134
  %579 = call float @dx.op.tertiary.f32(i32 46, float %138, float %564, float %578)  ; FMad(a,b,c)
  %580 = call float @dx.op.tertiary.f32(i32 46, float %142, float %569, float %579)  ; FMad(a,b,c)
  %581 = fadd fast float %580, %574
  %582 = fmul fast float %560, %134
  %583 = call float @dx.op.tertiary.f32(i32 46, float %138, float %565, float %582)  ; FMad(a,b,c)
  %584 = call float @dx.op.tertiary.f32(i32 46, float %142, float %570, float %583)  ; FMad(a,b,c)
  %585 = fadd fast float %584, %575
  %586 = fmul fast float %561, %134
  %587 = call float @dx.op.tertiary.f32(i32 46, float %138, float %566, float %586)  ; FMad(a,b,c)
  %588 = call float @dx.op.tertiary.f32(i32 46, float %142, float %571, float %587)  ; FMad(a,b,c)
  %589 = fadd fast float %588, %576
  %590 = fmul fast float %562, %134
  %591 = call float @dx.op.tertiary.f32(i32 46, float %138, float %567, float %590)  ; FMad(a,b,c)
  %592 = call float @dx.op.tertiary.f32(i32 46, float %142, float %572, float %591)  ; FMad(a,b,c)
  %593 = fadd fast float %592, %577
  %594 = fmul fast float %554, %201
  %595 = fmul fast float %554, %202
  %596 = fmul fast float %554, %203
  %597 = fmul fast float %559, %594
  %598 = call float @dx.op.tertiary.f32(i32 46, float %595, float %564, float %597)  ; FMad(a,b,c)
  %599 = call float @dx.op.tertiary.f32(i32 46, float %596, float %569, float %598)  ; FMad(a,b,c)
  %600 = fmul fast float %560, %594
  %601 = call float @dx.op.tertiary.f32(i32 46, float %595, float %565, float %600)  ; FMad(a,b,c)
  %602 = call float @dx.op.tertiary.f32(i32 46, float %596, float %570, float %601)  ; FMad(a,b,c)
  %603 = fmul fast float %561, %594
  %604 = call float @dx.op.tertiary.f32(i32 46, float %595, float %566, float %603)  ; FMad(a,b,c)
  %605 = call float @dx.op.tertiary.f32(i32 46, float %596, float %571, float %604)  ; FMad(a,b,c)
  %606 = fmul fast float %562, %594
  %607 = call float @dx.op.tertiary.f32(i32 46, float %595, float %567, float %606)  ; FMad(a,b,c)
  %608 = call float @dx.op.tertiary.f32(i32 46, float %596, float %572, float %607)  ; FMad(a,b,c)
  %609 = fadd fast float %599, %581
  %610 = fadd fast float %602, %585
  %611 = fadd fast float %605, %589
  %612 = fadd fast float %608, %593
  %613 = fdiv fast float %581, %593
  %614 = fdiv fast float %585, %593
  %615 = fdiv fast float %589, %593
  %616 = fdiv fast float %609, %612
  %617 = fdiv fast float %610, %612
  %618 = fdiv fast float %611, %612
  %619 = fsub fast float %616, %613
  %620 = fsub fast float %617, %614
  %621 = fsub fast float %618, %615
  %622 = fmul fast float %49, %613
  %623 = fmul fast float %50, %614
  %624 = fadd fast float %622, %46
  %625 = fadd fast float %623, %45
  %626 = fmul fast float %49, %619
  %627 = fmul fast float %50, %620
  %628 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %18, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %629 = extractvalue %dx.types.CBufRet.f32 %628, 2
  %630 = extractvalue %dx.types.CBufRet.f32 %628, 3
  %631 = call float @dx.op.tertiary.f32(i32 46, float %554, float %629, float 0.000000e+00)  ; FMad(a,b,c)
  %632 = call float @dx.op.tertiary.f32(i32 46, float %554, float %630, float 0.000000e+00)  ; FMad(a,b,c)
  %633 = fadd fast float %631, %589
  %634 = fadd fast float %632, %593
  %635 = fdiv fast float %633, %634
  %636 = fsub fast float %635, %615
  %637 = call float @dx.op.unary.f32(i32 6, float %636)  ; FAbs(value)
  %638 = fmul fast float %637, 2.500000e-01
  %639 = fmul fast float %557, 1.250000e-01
  %640 = fadd fast float %639, 1.250000e-01
  %641 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %642 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %643 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %641, %dx.types.Handle %642, float %624, float %625, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %644 = extractvalue %dx.types.ResRet.f32 %643, 0
  %645 = fmul fast float %626, %640
  %646 = fmul fast float %627, %640
  %647 = fmul fast float %621, %640
  %648 = fadd fast float %645, %624
  %649 = fadd fast float %646, %625
  %650 = fadd fast float %647, %615
  %651 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %641, %dx.types.Handle %642, float %648, float %649, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %652 = extractvalue %dx.types.ResRet.f32 %651, 0
  %653 = fadd fast float %650, %638
  %654 = fsub fast float %653, %652
  %655 = call float @dx.op.unary.f32(i32 6, float %654)  ; FAbs(value)
  %656 = fcmp fast olt float %655, %638
  %657 = fcmp fast une float %652, %644
  %658 = and i1 %656, %657
  %659 = select i1 %658, float %640, float -1.000000e+00
  %660 = fadd fast float %639, 2.500000e-01
  %661 = fmul fast float %626, %660
  %662 = fmul fast float %627, %660
  %663 = fmul fast float %621, %660
  %664 = fadd fast float %661, %624
  %665 = fadd fast float %662, %625
  %666 = fadd fast float %663, %615
  %667 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %641, %dx.types.Handle %642, float %664, float %665, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %668 = extractvalue %dx.types.ResRet.f32 %667, 0
  %669 = fadd fast float %666, %638
  %670 = fsub fast float %669, %668
  %671 = call float @dx.op.unary.f32(i32 6, float %670)  ; FAbs(value)
  %672 = fcmp fast olt float %671, %638
  %673 = fcmp fast une float %668, %644
  %674 = and i1 %672, %673
  %675 = fcmp fast olt float %659, 0.000000e+00
  %676 = and i1 %675, %674
  %677 = select i1 %676, float %660, float %659
  %678 = fadd fast float %639, 3.750000e-01
  %679 = fmul fast float %626, %678
  %680 = fmul fast float %627, %678
  %681 = fmul fast float %621, %678
  %682 = fadd fast float %679, %624
  %683 = fadd fast float %680, %625
  %684 = fadd fast float %681, %615
  %685 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %641, %dx.types.Handle %642, float %682, float %683, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %686 = extractvalue %dx.types.ResRet.f32 %685, 0
  %687 = fadd fast float %684, %638
  %688 = fsub fast float %687, %686
  %689 = call float @dx.op.unary.f32(i32 6, float %688)  ; FAbs(value)
  %690 = fcmp fast olt float %689, %638
  %691 = fcmp fast une float %686, %644
  %692 = and i1 %690, %691
  %693 = fcmp fast olt float %677, 0.000000e+00
  %694 = and i1 %693, %692
  %695 = select i1 %694, float %678, float %677
  %696 = fadd fast float %639, 5.000000e-01
  %697 = fmul fast float %626, %696
  %698 = fmul fast float %627, %696
  %699 = fmul fast float %621, %696
  %700 = fadd fast float %697, %624
  %701 = fadd fast float %698, %625
  %702 = fadd fast float %699, %615
  %703 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %641, %dx.types.Handle %642, float %700, float %701, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %704 = extractvalue %dx.types.ResRet.f32 %703, 0
  %705 = fadd fast float %702, %638
  %706 = fsub fast float %705, %704
  %707 = call float @dx.op.unary.f32(i32 6, float %706)  ; FAbs(value)
  %708 = fcmp fast olt float %707, %638
  %709 = fcmp fast une float %704, %644
  %710 = and i1 %708, %709
  %711 = fcmp fast olt float %695, 0.000000e+00
  %712 = and i1 %711, %710
  %713 = select i1 %712, float %696, float %695
  %714 = fadd fast float %639, 6.250000e-01
  %715 = fmul fast float %626, %714
  %716 = fmul fast float %627, %714
  %717 = fmul fast float %621, %714
  %718 = fadd fast float %715, %624
  %719 = fadd fast float %716, %625
  %720 = fadd fast float %717, %615
  %721 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %641, %dx.types.Handle %642, float %718, float %719, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %722 = extractvalue %dx.types.ResRet.f32 %721, 0
  %723 = fadd fast float %720, %638
  %724 = fsub fast float %723, %722
  %725 = call float @dx.op.unary.f32(i32 6, float %724)  ; FAbs(value)
  %726 = fcmp fast olt float %725, %638
  %727 = fcmp fast une float %722, %644
  %728 = and i1 %726, %727
  %729 = fcmp fast olt float %713, 0.000000e+00
  %730 = and i1 %729, %728
  %731 = select i1 %730, float %714, float %713
  %732 = fadd fast float %639, 7.500000e-01
  %733 = fmul fast float %626, %732
  %734 = fmul fast float %627, %732
  %735 = fmul fast float %621, %732
  %736 = fadd fast float %733, %624
  %737 = fadd fast float %734, %625
  %738 = fadd fast float %735, %615
  %739 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %641, %dx.types.Handle %642, float %736, float %737, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %740 = extractvalue %dx.types.ResRet.f32 %739, 0
  %741 = fadd fast float %738, %638
  %742 = fsub fast float %741, %740
  %743 = call float @dx.op.unary.f32(i32 6, float %742)  ; FAbs(value)
  %744 = fcmp fast olt float %743, %638
  %745 = fcmp fast une float %740, %644
  %746 = and i1 %744, %745
  %747 = fcmp fast olt float %731, 0.000000e+00
  %748 = and i1 %747, %746
  %749 = select i1 %748, float %732, float %731
  %750 = fadd fast float %639, 8.750000e-01
  %751 = fmul fast float %626, %750
  %752 = fmul fast float %627, %750
  %753 = fmul fast float %621, %750
  %754 = fadd fast float %751, %624
  %755 = fadd fast float %752, %625
  %756 = fadd fast float %753, %615
  %757 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %641, %dx.types.Handle %642, float %754, float %755, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %758 = extractvalue %dx.types.ResRet.f32 %757, 0
  %759 = fadd fast float %756, %638
  %760 = fsub fast float %759, %758
  %761 = call float @dx.op.unary.f32(i32 6, float %760)  ; FAbs(value)
  %762 = fcmp fast olt float %761, %638
  %763 = fcmp fast une float %758, %644
  %764 = and i1 %762, %763
  %765 = fcmp fast olt float %749, 0.000000e+00
  %766 = and i1 %765, %764
  %767 = select i1 %766, float %750, float %749
  %768 = fadd fast float %639, 1.000000e+00
  %769 = fmul fast float %626, %768
  %770 = fmul fast float %627, %768
  %771 = fmul fast float %621, %768
  %772 = fadd fast float %769, %624
  %773 = fadd fast float %770, %625
  %774 = fadd fast float %771, %615
  %775 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %641, %dx.types.Handle %642, float %772, float %773, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %776 = extractvalue %dx.types.ResRet.f32 %775, 0
  %777 = fadd fast float %774, %638
  %778 = fsub fast float %777, %776
  %779 = call float @dx.op.unary.f32(i32 6, float %778)  ; FAbs(value)
  %780 = fcmp fast olt float %779, %638
  %781 = fcmp fast une float %776, %644
  %782 = and i1 %780, %781
  %783 = fcmp fast olt float %767, 0.000000e+00
  %784 = and i1 %783, %782
  %785 = select i1 %784, float %768, float %767
  %786 = fcmp fast ogt float %785, 0.000000e+00
  br i1 %786, label %787, label %819

; <label>:787                                     ; preds = %556
  %788 = fmul fast float %785, %626
  %789 = fmul fast float %785, %627
  %790 = fadd fast float %788, %624
  %791 = fadd fast float %789, %625
  %792 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %793 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %792, %dx.types.Handle %642, float %790, float %791, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %794 = extractvalue %dx.types.ResRet.f32 %793, 3
  %795 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %796 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %795, %dx.types.Handle %642, float %790, float %791, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %797 = extractvalue %dx.types.ResRet.f32 %796, 3
  %798 = fmul fast float %797, 2.550000e+02
  %799 = fadd fast float %798, 5.000000e-01
  %800 = fptoui float %799 to i32
  %801 = and i32 %800, 15
  %802 = fmul fast float %794, 0x400FFDF3C0000000
  %803 = fptoui float %802 to i32
  %804 = and i32 %803, 1
  %805 = icmp ne i32 %804, 0
  %806 = icmp ne i32 %801, 9
  %807 = and i1 %805, %806
  %808 = zext i1 %807 to i32
  %809 = fcmp fast olt float %790, 1.000000e+00
  %810 = fcmp fast olt float %791, 1.000000e+00
  %811 = fcmp fast ogt float %790, 0.000000e+00
  %812 = fcmp fast ogt float %791, 0.000000e+00
  %813 = and i1 %811, %809
  %814 = and i1 %812, %810
  %815 = and i1 %813, %814
  %816 = fmul fast float %785, %554
  %817 = select i1 %815, float %816, float -1.000000e+00
  %818 = fcmp ogt float %817, 0.000000e+00
  br label %819

; <label>:819                                     ; preds = %787, %556
  %820 = phi i1 [ %818, %787 ], [ false, %556 ]
  %821 = phi i32 [ %808, %787 ], [ 0, %556 ]
  br i1 %820, label %822, label %828

; <label>:822                                     ; preds = %819
  %823 = icmp ne i32 %821, 0
  %824 = select i1 %823, float %182, float %184
  %825 = fsub fast float 1.000000e+00, %824
  %826 = fmul fast float %825, %550
  %827 = fmul fast float %825, %549
  br label %828

; <label>:828                                     ; preds = %822, %819, %548
  %829 = phi float [ %827, %822 ], [ %549, %819 ], [ %549, %548 ]
  %830 = phi float [ %826, %822 ], [ %550, %819 ], [ %550, %548 ]
  %831 = fadd fast float %830, %829
  %832 = fcmp fast ogt float %831, 0.000000e+00
  br i1 %832, label %833, label %1349, !dx.controlflow.hints !44

; <label>:833                                     ; preds = %828
  %834 = fmul fast float %171, %168
  %835 = fmul fast float %172, %167
  %836 = fsub fast float %834, %835
  %837 = fmul fast float %172, %166
  %838 = fmul fast float %170, %168
  %839 = fsub fast float %837, %838
  %840 = fmul fast float %170, %167
  %841 = fmul fast float %171, %166
  %842 = fsub fast float %840, %841
  %843 = fcmp fast ogt float %194, 0x3FA1EB8520000000
  br i1 %843, label %844, label %939

; <label>:844                                     ; preds = %833
  %845 = fmul fast float %836, %196
  %846 = call float @dx.op.tertiary.f32(i32 46, float %839, float %197, float %845)  ; FMad(a,b,c)
  %847 = call float @dx.op.tertiary.f32(i32 46, float %842, float %198, float %846)  ; FMad(a,b,c)
  %848 = fmul fast float %170, %196
  %849 = call float @dx.op.tertiary.f32(i32 46, float %171, float %197, float %848)  ; FMad(a,b,c)
  %850 = call float @dx.op.tertiary.f32(i32 46, float %172, float %198, float %849)  ; FMad(a,b,c)
  %851 = fmul fast float %166, %196
  %852 = call float @dx.op.tertiary.f32(i32 46, float %167, float %197, float %851)  ; FMad(a,b,c)
  %853 = call float @dx.op.tertiary.f32(i32 46, float %168, float %198, float %852)  ; FMad(a,b,c)
  %854 = fmul fast float %194, %194
  %855 = fsub fast float 1.000000e+00, %854
  %856 = call float @dx.op.unary.f32(i32 24, float %855)  ; Sqrt(value)
  %857 = fmul fast float %195, %194
  %858 = call float @dx.op.binary.f32(i32 36, float %853, float %857)  ; FMin(a,b)
  %859 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %857)  ; FMax(a,b)
  %860 = fdiv fast float %858, %859
  %861 = fmul fast float %856, %195
  %862 = fmul fast float %861, %860
  %863 = fcmp fast ogt float %847, 0.000000e+00
  %864 = fcmp fast ogt float %850, 0.000000e+00
  %865 = fcmp fast olt float %847, 0.000000e+00
  %866 = fcmp fast olt float %850, 0.000000e+00
  %867 = zext i1 %863 to i32
  %868 = zext i1 %864 to i32
  %869 = zext i1 %865 to i32
  %870 = zext i1 %866 to i32
  %871 = sub nsw i32 %867, %869
  %872 = sub nsw i32 %868, %870
  %873 = sitofp i32 %871 to float
  %874 = sitofp i32 %872 to float
  %875 = fadd fast float %862, %173
  %876 = fadd fast float %862, %176
  %877 = call float @dx.op.unary.f32(i32 6, float %847)  ; FAbs(value)
  %878 = call float @dx.op.unary.f32(i32 6, float %850)  ; FAbs(value)
  %879 = call float @dx.op.binary.f32(i32 35, float %877, float %875)  ; FMax(a,b)
  %880 = call float @dx.op.binary.f32(i32 35, float %878, float %876)  ; FMax(a,b)
  %881 = fsub fast float %174, %862
  %882 = fadd fast float %881, %879
  %883 = fmul fast float %882, %873
  %884 = fsub fast float %177, %862
  %885 = fadd fast float %884, %880
  %886 = fmul fast float %885, %874
  %887 = fsub fast float %853, %858
  %888 = call float @dx.op.binary.f32(i32 35, float %887, float 0x3F50624DE0000000)  ; FMax(a,b)
  %889 = call float @dx.op.unary.f32(i32 6, float %883)  ; FAbs(value)
  %890 = call float @dx.op.unary.f32(i32 6, float %886)  ; FAbs(value)
  %891 = fdiv fast float %889, %888
  %892 = fdiv fast float %890, %888
  %893 = fmul fast float %891, %858
  %894 = fmul fast float %892, %858
  %895 = fsub fast float %893, %862
  %896 = fsub fast float %894, %862
  %897 = fsub fast float -0.000000e+00, %873
  %898 = fsub fast float -0.000000e+00, %874
  %899 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %897)  ; FMax(a,b)
  %900 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %898)  ; FMax(a,b)
  %901 = fmul fast float %895, %899
  %902 = fmul fast float %896, %900
  %903 = fsub fast float %901, %173
  %904 = fsub fast float %902, %176
  %905 = call float @dx.op.binary.f32(i32 35, float %903, float %174)  ; FMax(a,b)
  %906 = call float @dx.op.binary.f32(i32 35, float %904, float %177)  ; FMax(a,b)
  %907 = call float @dx.op.binary.f32(i32 36, float %905, float %173)  ; FMin(a,b)
  %908 = call float @dx.op.binary.f32(i32 36, float %906, float %176)  ; FMin(a,b)
  %909 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %873)  ; FMax(a,b)
  %910 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %874)  ; FMax(a,b)
  %911 = fmul fast float %909, %895
  %912 = fmul fast float %910, %896
  %913 = fsub fast float %173, %911
  %914 = fsub fast float %176, %912
  %915 = call float @dx.op.binary.f32(i32 35, float %913, float %174)  ; FMax(a,b)
  %916 = call float @dx.op.binary.f32(i32 35, float %914, float %177)  ; FMax(a,b)
  %917 = call float @dx.op.binary.f32(i32 36, float %915, float %173)  ; FMin(a,b)
  %918 = call float @dx.op.binary.f32(i32 36, float %916, float %176)  ; FMin(a,b)
  %919 = fadd fast float %917, %907
  %920 = fadd fast float %918, %908
  %921 = fmul fast float %919, 5.000000e-01
  %922 = fmul fast float %920, 5.000000e-01
  %923 = fsub fast float %917, %907
  %924 = fsub fast float %918, %908
  %925 = fmul fast float %923, 5.000000e-01
  %926 = fmul fast float %924, 5.000000e-01
  %927 = fmul fast float %921, %836
  %928 = fmul fast float %921, %839
  %929 = fmul fast float %921, %842
  %930 = fsub fast float %196, %927
  %931 = fsub fast float %197, %928
  %932 = fsub fast float %198, %929
  %933 = fmul fast float %922, %170
  %934 = fmul fast float %922, %171
  %935 = fmul fast float %922, %172
  %936 = fsub fast float %930, %933
  %937 = fsub fast float %931, %934
  %938 = fsub fast float %932, %935
  br label %939

; <label>:939                                     ; preds = %844, %833
  %940 = phi float [ %925, %844 ], [ %173, %833 ]
  %941 = phi float [ %926, %844 ], [ %176, %833 ]
  %942 = phi float [ %936, %844 ], [ %196, %833 ]
  %943 = phi float [ %937, %844 ], [ %197, %833 ]
  %944 = phi float [ %938, %844 ], [ %198, %833 ]
  %945 = fcmp fast une float %940, 0.000000e+00
  %946 = fcmp fast une float %941, 0.000000e+00
  %947 = and i1 %945, %946
  br i1 %947, label %948, label %1339

; <label>:948                                     ; preds = %939
  %949 = call float @dx.op.dot3.f32(i32 55, float %836, float %839, float %842, float %942, float %943, float %944)  ; Dot3(ax,ay,az,bx,by,bz)
  %950 = call float @dx.op.dot3.f32(i32 55, float %170, float %171, float %172, float %942, float %943, float %944)  ; Dot3(ax,ay,az,bx,by,bz)
  %951 = call float @dx.op.dot3.f32(i32 55, float %166, float %167, float %168, float %942, float %943, float %944)  ; Dot3(ax,ay,az,bx,by,bz)
  %952 = fsub fast float %949, %940
  %953 = fadd fast float %949, %940
  %954 = fsub fast float %950, %941
  %955 = fadd fast float %950, %941
  %956 = fmul fast float %951, %951
  %957 = call float @dx.op.dot2.f32(i32 54, float %952, float %954, float %952, float %954)  ; Dot2(ax,ay,bx,by)
  %958 = fadd fast float %957, %956
  %959 = call float @dx.op.unary.f32(i32 25, float %958)  ; Rsqrt(value)
  %960 = fmul fast float %959, %952
  %961 = fmul fast float %959, %954
  %962 = fmul fast float %959, %951
  %963 = call float @dx.op.dot2.f32(i32 54, float %953, float %954, float %953, float %954)  ; Dot2(ax,ay,bx,by)
  %964 = fadd fast float %963, %956
  %965 = call float @dx.op.unary.f32(i32 25, float %964)  ; Rsqrt(value)
  %966 = fmul fast float %965, %953
  %967 = fmul fast float %965, %954
  %968 = fmul fast float %965, %951
  %969 = call float @dx.op.dot2.f32(i32 54, float %953, float %955, float %953, float %955)  ; Dot2(ax,ay,bx,by)
  %970 = fadd fast float %969, %956
  %971 = call float @dx.op.unary.f32(i32 25, float %970)  ; Rsqrt(value)
  %972 = fmul fast float %971, %953
  %973 = fmul fast float %971, %955
  %974 = fmul fast float %971, %951
  %975 = call float @dx.op.dot2.f32(i32 54, float %952, float %955, float %952, float %955)  ; Dot2(ax,ay,bx,by)
  %976 = fadd fast float %975, %956
  %977 = call float @dx.op.unary.f32(i32 25, float %976)  ; Rsqrt(value)
  %978 = fmul fast float %977, %952
  %979 = fmul fast float %977, %955
  %980 = fmul fast float %977, %951
  %981 = call float @dx.op.dot3.f32(i32 55, float %960, float %961, float %962, float %966, float %967, float %968)  ; Dot3(ax,ay,az,bx,by,bz)
  %982 = call float @dx.op.dot3.f32(i32 55, float %966, float %967, float %968, float %972, float %973, float %974)  ; Dot3(ax,ay,az,bx,by,bz)
  %983 = call float @dx.op.dot3.f32(i32 55, float %972, float %973, float %974, float %978, float %979, float %980)  ; Dot3(ax,ay,az,bx,by,bz)
  %984 = call float @dx.op.dot3.f32(i32 55, float %978, float %979, float %980, float %960, float %961, float %962)  ; Dot3(ax,ay,az,bx,by,bz)
  %985 = fmul fast float %981, 0x3FC6666660000000
  %986 = fsub fast float 0x3FF921FF20000000, %985
  %987 = fadd fast float %981, 1.000000e+00
  %988 = call float @dx.op.unary.f32(i32 25, float %987)  ; Rsqrt(value)
  %989 = fmul fast float %982, 0x3FC6666660000000
  %990 = fsub fast float 0x3FF921FF20000000, %989
  %991 = fadd fast float %982, 1.000000e+00
  %992 = call float @dx.op.unary.f32(i32 25, float %991)  ; Rsqrt(value)
  %993 = fmul fast float %992, %990
  %994 = fmul fast float %983, 0x3FC6666660000000
  %995 = fsub fast float 0x3FF921FF20000000, %994
  %996 = fadd fast float %983, 1.000000e+00
  %997 = call float @dx.op.unary.f32(i32 25, float %996)  ; Rsqrt(value)
  %998 = fmul fast float %984, 0x3FC6666660000000
  %999 = fsub fast float 0x3FF921FF20000000, %998
  %1000 = fadd fast float %984, 1.000000e+00
  %1001 = call float @dx.op.unary.f32(i32 25, float %1000)  ; Rsqrt(value)
  %1002 = fmul fast float %1001, %999
  %1003 = fmul fast float %986, %988
  %1004 = fsub fast float -0.000000e+00, %1003
  %1005 = fmul fast float %960, %1004
  %1006 = fmul fast float %961, %1004
  %1007 = fmul fast float %962, %1004
  %1008 = fmul fast float %993, %972
  %1009 = fmul fast float %993, %973
  %1010 = fmul fast float %993, %974
  %1011 = fadd fast float %1008, %1005
  %1012 = fadd fast float %1009, %1006
  %1013 = fadd fast float %1010, %1007
  %1014 = fmul fast float %1013, %967
  %1015 = fmul fast float %1012, %968
  %1016 = fsub fast float %1014, %1015
  %1017 = fmul fast float %1011, %968
  %1018 = fmul fast float %1013, %966
  %1019 = fsub fast float %1017, %1018
  %1020 = fmul fast float %1012, %966
  %1021 = fmul fast float %1011, %967
  %1022 = fsub fast float %1020, %1021
  %1023 = fmul fast float %1002, %960
  %1024 = fmul fast float %1002, %961
  %1025 = fmul fast float %1002, %962
  %1026 = fmul fast float %995, %997
  %1027 = fsub fast float -0.000000e+00, %1026
  %1028 = fmul fast float %972, %1027
  %1029 = fmul fast float %973, %1027
  %1030 = fmul fast float %974, %1027
  %1031 = fadd fast float %1023, %1028
  %1032 = fadd fast float %1024, %1029
  %1033 = fadd fast float %1025, %1030
  %1034 = fmul fast float %1033, %979
  %1035 = fmul fast float %1032, %980
  %1036 = fsub fast float %1034, %1035
  %1037 = fmul fast float %1031, %980
  %1038 = fmul fast float %1033, %978
  %1039 = fsub fast float %1037, %1038
  %1040 = fmul fast float %1032, %978
  %1041 = fmul fast float %1031, %979
  %1042 = fsub fast float %1040, %1041
  %1043 = fadd fast float %1036, %1016
  %1044 = fadd fast float %1039, %1019
  %1045 = fadd fast float %1042, %1022
  %1046 = fmul fast float %1043, %836
  %1047 = fmul fast float %1043, %839
  %1048 = fmul fast float %1043, %842
  %1049 = fmul fast float %1044, %170
  %1050 = fmul fast float %1044, %171
  %1051 = fmul fast float %1044, %172
  %1052 = fadd fast float %1046, %1049
  %1053 = fadd fast float %1047, %1050
  %1054 = fadd fast float %1048, %1051
  %1055 = fmul fast float %1045, %166
  %1056 = fmul fast float %1045, %167
  %1057 = fmul fast float %1045, %168
  %1058 = fadd fast float %1052, %1055
  %1059 = fadd fast float %1053, %1056
  %1060 = fadd fast float %1054, %1057
  %1061 = call float @dx.op.dot3.f32(i32 55, float %1058, float %1059, float %1060, float %1058, float %1059, float %1060)  ; Dot3(ax,ay,az,bx,by,bz)
  %1062 = call float @dx.op.unary.f32(i32 25, float %1061)  ; Rsqrt(value)
  %1063 = fmul fast float %1058, %1062
  %1064 = fmul fast float %1059, %1062
  %1065 = fmul fast float %1060, %1062
  %1066 = fmul fast float %1061, 5.000000e-01
  %1067 = fmul fast float %1066, %1062
  %1068 = call float @dx.op.binary.f32(i32 35, float %90, float 0x3F947AE140000000)  ; FMax(a,b)
  %1069 = call float @dx.op.binary.f32(i32 35, float %1068, float 0x3F70101020000000)  ; FMax(a,b)
  %1070 = call float @dx.op.binary.f32(i32 36, float %1069, float 1.000000e+00)  ; FMin(a,b)
  %1071 = call float @dx.op.binary.f32(i32 36, float 1.000000e+00, float %99)  ; FMin(a,b)
  %1072 = call float @dx.op.dot3.f32(i32 55, float %204, float %205, float %206, float %1063, float %1064, float %1065)  ; Dot3(ax,ay,az,bx,by,bz)
  %1073 = call float @dx.op.dot3.f32(i32 55, float %73, float %74, float %75, float %1063, float %1064, float %1065)  ; Dot3(ax,ay,az,bx,by,bz)
  %1074 = call float @dx.op.binary.f32(i32 35, float %1073, float -1.000000e+00)  ; FMax(a,b)
  %1075 = call float @dx.op.binary.f32(i32 36, float %1074, float 1.000000e+00)  ; FMin(a,b)
  %1076 = call float @dx.op.dot3.f32(i32 55, float %73, float %74, float %75, float %204, float %205, float %206)  ; Dot3(ax,ay,az,bx,by,bz)
  %1077 = call float @dx.op.binary.f32(i32 35, float %1076, float -1.000000e+00)  ; FMax(a,b)
  %1078 = call float @dx.op.binary.f32(i32 36, float %1077, float 1.000000e+00)  ; FMin(a,b)
  %1079 = call float @dx.op.unary.f32(i32 6, float %1078)  ; FAbs(value)
  %1080 = fmul fast float %1079, 0x3FC40AE960000000
  %1081 = fsub fast float 0x3FF921FB60000000, %1080
  %1082 = fsub fast float 1.000000e+00, %1079
  %1083 = call float @dx.op.unary.f32(i32 24, float %1082)  ; Sqrt(value)
  %1084 = fmul fast float %1081, %1083
  %1085 = fcmp fast oge float %1078, 0.000000e+00
  %1086 = fsub fast float 0x400921FB60000000, %1084
  %1087 = select i1 %1085, float %1084, float %1086
  %1088 = call float @dx.op.unary.f32(i32 6, float %1075)  ; FAbs(value)
  %1089 = fmul fast float %1088, 0x3FC40AE960000000
  %1090 = fsub fast float 0x3FF921FB60000000, %1089
  %1091 = fsub fast float 1.000000e+00, %1088
  %1092 = call float @dx.op.unary.f32(i32 24, float %1091)  ; Sqrt(value)
  %1093 = fmul fast float %1090, %1092
  %1094 = fcmp fast oge float %1075, 0.000000e+00
  %1095 = fsub fast float 0x400921FB60000000, %1093
  %1096 = select i1 %1094, float %1093, float %1095
  %1097 = fsub fast float %1096, %1087
  %1098 = call float @dx.op.unary.f32(i32 6, float %1097)  ; FAbs(value)
  %1099 = fmul fast float %1098, 5.000000e-01
  %1100 = call float @dx.op.unary.f32(i32 12, float %1099)  ; Cos(value)
  %1101 = fmul fast float %1075, %73
  %1102 = fmul fast float %1075, %74
  %1103 = fmul fast float %1075, %75
  %1104 = fsub fast float %1063, %1101
  %1105 = fsub fast float %1064, %1102
  %1106 = fsub fast float %1065, %1103
  %1107 = fmul fast float %1078, %73
  %1108 = fmul fast float %1078, %74
  %1109 = fmul fast float %1078, %75
  %1110 = fsub fast float %204, %1107
  %1111 = fsub fast float %205, %1108
  %1112 = fsub fast float %206, %1109
  %1113 = call float @dx.op.dot3.f32(i32 55, float %1104, float %1105, float %1106, float %1110, float %1111, float %1112)  ; Dot3(ax,ay,az,bx,by,bz)
  %1114 = call float @dx.op.dot3.f32(i32 55, float %1104, float %1105, float %1106, float %1104, float %1105, float %1106)  ; Dot3(ax,ay,az,bx,by,bz)
  %1115 = call float @dx.op.dot3.f32(i32 55, float %1110, float %1111, float %1112, float %1110, float %1111, float %1112)  ; Dot3(ax,ay,az,bx,by,bz)
  %1116 = fmul fast float %1115, %1114
  %1117 = fadd fast float %1116, 0x3F1A36E2E0000000
  %1118 = call float @dx.op.unary.f32(i32 25, float %1117)  ; Rsqrt(value)
  %1119 = fmul fast float %1118, %1113
  %1120 = fmul fast float %1119, 5.000000e-01
  %1121 = fadd fast float %1120, 5.000000e-01
  %1122 = call float @dx.op.unary.f32(i32 7, float %1121)  ; Saturate(value)
  %1123 = call float @dx.op.unary.f32(i32 24, float %1122)  ; Sqrt(value)
  %1124 = fdiv fast float 0x3FF30A3D80000000, %1100
  %1125 = fmul fast float %1100, 0x3FD70A3D80000000
  %1126 = fadd fast float %1124, %1125
  %1127 = fmul fast float %1070, %1070
  %1128 = fmul fast float %1127, 5.000000e-01
  %1129 = fmul fast float %1127, 2.000000e+00
  %1130 = and i32 %213, 1
  %1131 = icmp eq i32 %1130, 0
  br i1 %1131, label %1173, label %1132

; <label>:1132                                    ; preds = %948
  %1133 = fmul fast float %1123, 0x3FEFEBF020000000
  %1134 = fmul fast float %1078, %1078
  %1135 = fsub fast float 1.000000e+00, %1134
  %1136 = call float @dx.op.unary.f32(i32 24, float %1135)  ; Sqrt(value)
  %1137 = fmul fast float %1133, %1136
  %1138 = fmul fast float %1078, 0x3FB1E7C640000000
  %1139 = fsub fast float %1137, %1138
  %1140 = fmul fast float %1139, 0x3FC1E7C640000000
  %1141 = fadd fast float %1078, %1075
  %1142 = fadd fast float %1141, %1140
  %1143 = fmul fast float %1127, 0x3FF6A09E60000000
  %1144 = fmul fast float %1143, %1123
  %1145 = fmul fast float %1142, %1142
  %1146 = fmul fast float %1145, -5.000000e-01
  %1147 = fmul fast float %1144, %1144
  %1148 = fdiv fast float %1146, %1147
  %1149 = fmul fast float %1148, 0x3FF7154760000000
  %1150 = call float @dx.op.unary.f32(i32 21, float %1149)  ; Exp(value)
  %1151 = fmul fast float %1144, 0x40040D9320000000
  %1152 = fdiv fast float %1150, %1151
  %1153 = fmul fast float %1072, 5.000000e-01
  %1154 = fadd fast float %1153, 5.000000e-01
  %1155 = call float @dx.op.unary.f32(i32 7, float %1154)  ; Saturate(value)
  %1156 = call float @dx.op.unary.f32(i32 24, float %1155)  ; Sqrt(value)
  %1157 = fsub fast float 1.000000e+00, %1156
  %1158 = fmul fast float %1157, %1157
  %1159 = fmul fast float %1157, 0x3FEE82E740000000
  %1160 = fmul fast float %1158, %1158
  %1161 = fmul fast float %1160, %1159
  %1162 = fadd fast float %1161, 0x3FA7D18B20000000
  %1163 = fsub fast float -0.000000e+00, %1072
  %1164 = call float @dx.op.unary.f32(i32 7, float %1163)  ; Saturate(value)
  %1165 = fadd fast float %1071, -1.000000e+00
  %1166 = fmul fast float %1164, %1165
  %1167 = fadd fast float %1166, 1.000000e+00
  %1168 = fmul fast float %95, 0x3F60101020000000
  %1169 = fmul fast float %1168, %1123
  %1170 = fmul fast float %1169, %1152
  %1171 = fmul fast float %1170, %1167
  %1172 = fmul fast float %1171, %1162
  br label %1173

; <label>:1173                                    ; preds = %1132, %948
  %1174 = phi float [ %1172, %1132 ], [ 0.000000e+00, %948 ]
  %1175 = and i32 %213, 2
  %1176 = icmp eq i32 %1175, 0
  br i1 %1176, label %1259, label %1177

; <label>:1177                                    ; preds = %1173
  %1178 = fadd fast float %1075, 0xBFA1EB8520000000
  %1179 = fadd fast float %1178, %1078
  %1180 = fmul fast float %1179, %1179
  %1181 = fmul fast float %1180, -5.000000e-01
  %1182 = fmul fast float %1128, %1128
  %1183 = fdiv fast float %1181, %1182
  %1184 = fmul fast float %1183, 0x3FF7154760000000
  %1185 = call float @dx.op.unary.f32(i32 21, float %1184)  ; Exp(value)
  %1186 = fmul fast float %1127, 0x3FF40D9320000000
  %1187 = fdiv fast float %1185, %1186
  %1188 = fdiv fast float 1.000000e+00, %1126
  %1189 = fmul fast float %1119, 0x3FE99999A0000000
  %1190 = fsub fast float 0x3FE3333340000000, %1189
  %1191 = fmul fast float %1188, %1190
  %1192 = fadd fast float %1191, 1.000000e+00
  %1193 = fmul fast float %1192, %1123
  %1194 = fmul fast float %1193, %1193
  %1195 = fsub fast float 1.000000e+00, %1194
  %1196 = call float @dx.op.unary.f32(i32 7, float %1195)  ; Saturate(value)
  %1197 = call float @dx.op.unary.f32(i32 24, float %1196)  ; Sqrt(value)
  %1198 = fmul fast float %1197, %1100
  %1199 = fsub fast float 1.000000e+00, %1198
  %1200 = fmul fast float %1199, %1199
  %1201 = fmul fast float %1199, 0x3FEE82E740000000
  %1202 = fmul fast float %1200, %1200
  %1203 = fmul fast float %1202, %1201
  %1204 = fsub fast float 0x3FEE82E740000000, %1203
  %1205 = fmul fast float %1193, %1188
  %1206 = fmul fast float %1205, %1205
  br i1 %458, label %1207, label %1221

; <label>:1207                                    ; preds = %1177
  %1208 = fsub fast float 1.000000e+00, %1206
  %1209 = call float @dx.op.unary.f32(i32 24, float %1208)  ; Sqrt(value)
  %1210 = fmul fast float %1209, 5.000000e-01
  %1211 = fdiv fast float %1210, %1100
  %1212 = call float @dx.op.unary.f32(i32 6, float %91)  ; FAbs(value)
  %1213 = call float @dx.op.unary.f32(i32 6, float %92)  ; FAbs(value)
  %1214 = call float @dx.op.unary.f32(i32 6, float %93)  ; FAbs(value)
  %1215 = call float @dx.op.unary.f32(i32 23, float %1212)  ; Log(value)
  %1216 = call float @dx.op.unary.f32(i32 23, float %1213)  ; Log(value)
  %1217 = call float @dx.op.unary.f32(i32 23, float %1214)  ; Log(value)
  %1218 = fmul fast float %1215, %1211
  %1219 = fmul fast float %1216, %1211
  %1220 = fmul fast float %1217, %1211
  br label %1237

; <label>:1221                                    ; preds = %1177
  %1222 = call float @dx.op.unary.f32(i32 23, float %91)  ; Log(value)
  %1223 = call float @dx.op.unary.f32(i32 23, float %92)  ; Log(value)
  %1224 = call float @dx.op.unary.f32(i32 23, float %93)  ; Log(value)
  %1225 = fdiv fast float %1206, %1100
  %1226 = fsub fast float 1.000000e+00, %1225
  %1227 = call float @dx.op.unary.f32(i32 6, float %1226)  ; FAbs(value)
  %1228 = fmul fast float %1222, %1222
  %1229 = fmul fast float %1228, 0xBFA4787320000000
  %1230 = fmul fast float %1229, %1227
  %1231 = fmul fast float %1223, %1223
  %1232 = fmul fast float %1231, 0xBFA4787320000000
  %1233 = fmul fast float %1232, %1227
  %1234 = fmul fast float %1224, %1224
  %1235 = fmul fast float %1234, 0xBFA4787320000000
  %1236 = fmul fast float %1235, %1227
  br label %1237

; <label>:1237                                    ; preds = %1221, %1207
  %1238 = phi float [ %1218, %1207 ], [ %1230, %1221 ]
  %1239 = phi float [ %1219, %1207 ], [ %1233, %1221 ]
  %1240 = phi float [ %1220, %1207 ], [ %1236, %1221 ]
  %1241 = call float @dx.op.unary.f32(i32 21, float %1238)  ; Exp(value)
  %1242 = call float @dx.op.unary.f32(i32 21, float %1239)  ; Exp(value)
  %1243 = call float @dx.op.unary.f32(i32 21, float %1240)  ; Exp(value)
  %1244 = fmul fast float %1119, 0x40151037A0000000
  %1245 = fsub fast float 0xC016F7BB80000000, %1244
  %1246 = call float @dx.op.unary.f32(i32 21, float %1245)  ; Exp(value)
  %1247 = fmul fast float %1204, %1204
  %1248 = fmul fast float %1247, %1187
  %1249 = fmul fast float %1248, %1246
  %1250 = fmul fast float %1241, %1071
  %1251 = fmul fast float %1250, %1249
  %1252 = fmul fast float %1242, %1071
  %1253 = fmul fast float %1252, %1249
  %1254 = fmul fast float %1243, %1071
  %1255 = fmul fast float %1254, %1249
  %1256 = fadd fast float %1251, %1174
  %1257 = fadd fast float %1253, %1174
  %1258 = fadd fast float %1255, %1174
  br label %1259

; <label>:1259                                    ; preds = %1237, %1173
  %1260 = phi float [ %1256, %1237 ], [ %1174, %1173 ]
  %1261 = phi float [ %1257, %1237 ], [ %1174, %1173 ]
  %1262 = phi float [ %1258, %1237 ], [ %1174, %1173 ]
  %1263 = and i32 %213, 4
  %1264 = icmp eq i32 %1263, 0
  br i1 %1264, label %1311, label %1265

; <label>:1265                                    ; preds = %1259
  %1266 = fadd fast float %1075, 0xBFC1EB8520000000
  %1267 = fadd fast float %1266, %1078
  %1268 = fmul fast float %1267, %1267
  %1269 = fmul fast float %1268, -5.000000e-01
  %1270 = fmul fast float %1129, %1129
  %1271 = fdiv fast float %1269, %1270
  %1272 = fmul fast float %1271, 0x3FF7154760000000
  %1273 = call float @dx.op.unary.f32(i32 21, float %1272)  ; Exp(value)
  %1274 = fmul fast float %1127, 0x40140D9320000000
  %1275 = fdiv fast float %1273, %1274
  %1276 = fmul fast float %1100, 5.000000e-01
  %1277 = fsub fast float 1.000000e+00, %1276
  %1278 = fmul fast float %1277, %1277
  %1279 = fmul fast float %1100, 0x3FDE82E740000000
  %1280 = fsub fast float 0x3FEE82E740000000, %1279
  %1281 = fmul fast float %1278, %1278
  %1282 = fmul fast float %1281, %1280
  %1283 = fadd fast float %1282, 0x3FA7D18B20000000
  %1284 = fsub fast float 0x3FEE82E740000000, %1282
  %1285 = fdiv fast float 0x3FE99999A0000000, %1100
  %1286 = call float @dx.op.unary.f32(i32 6, float %91)  ; FAbs(value)
  %1287 = call float @dx.op.unary.f32(i32 6, float %92)  ; FAbs(value)
  %1288 = call float @dx.op.unary.f32(i32 6, float %93)  ; FAbs(value)
  %1289 = call float @dx.op.unary.f32(i32 23, float %1286)  ; Log(value)
  %1290 = call float @dx.op.unary.f32(i32 23, float %1287)  ; Log(value)
  %1291 = call float @dx.op.unary.f32(i32 23, float %1288)  ; Log(value)
  %1292 = fmul fast float %1289, %1285
  %1293 = fmul fast float %1290, %1285
  %1294 = fmul fast float %1291, %1285
  %1295 = call float @dx.op.unary.f32(i32 21, float %1292)  ; Exp(value)
  %1296 = call float @dx.op.unary.f32(i32 21, float %1293)  ; Exp(value)
  %1297 = call float @dx.op.unary.f32(i32 21, float %1294)  ; Exp(value)
  %1298 = fmul fast float %1119, 0x4038869BE0000000
  %1299 = fadd fast float %1298, 0xC038355B40000000
  %1300 = call float @dx.op.unary.f32(i32 21, float %1299)  ; Exp(value)
  %1301 = fmul fast float %1284, %1284
  %1302 = fmul fast float %1301, %1283
  %1303 = fmul fast float %1302, %1275
  %1304 = fmul fast float %1303, %1300
  %1305 = fmul fast float %1304, %1295
  %1306 = fmul fast float %1304, %1296
  %1307 = fmul fast float %1304, %1297
  %1308 = fadd fast float %1305, %1260
  %1309 = fadd fast float %1306, %1261
  %1310 = fadd fast float %1307, %1262
  br label %1311

; <label>:1311                                    ; preds = %1265, %1259
  %1312 = phi float [ %1308, %1265 ], [ %1260, %1259 ]
  %1313 = phi float [ %1309, %1265 ], [ %1261, %1259 ]
  %1314 = phi float [ %1310, %1265 ], [ %1262, %1259 ]
  %1315 = fadd fast float %1312, %454
  %1316 = fadd fast float %1313, %455
  %1317 = fadd fast float %1314, %456
  %1318 = fsub fast float -0.000000e+00, %441
  %1319 = select i1 %451, float %1318, float -1.000000e+00
  %1320 = fmul fast float %1319, %830
  %1321 = fmul fast float %1320, %1315
  %1322 = fsub fast float -0.000000e+00, %442
  %1323 = select i1 %451, float %1322, float -1.000000e+00
  %1324 = fmul fast float %1323, %830
  %1325 = fmul fast float %1324, %1316
  %1326 = fsub fast float -0.000000e+00, %443
  %1327 = select i1 %451, float %1326, float -1.000000e+00
  %1328 = fmul fast float %1327, %830
  %1329 = fmul fast float %1328, %1317
  %1330 = call float @dx.op.binary.f32(i32 36, float %1321, float 0.000000e+00)  ; FMin(a,b)
  %1331 = call float @dx.op.binary.f32(i32 36, float %1325, float 0.000000e+00)  ; FMin(a,b)
  %1332 = call float @dx.op.binary.f32(i32 36, float %1329, float 0.000000e+00)  ; FMin(a,b)
  %1333 = fmul fast float %1067, %1330
  %1334 = fsub fast float -0.000000e+00, %1333
  %1335 = fmul fast float %1067, %1331
  %1336 = fsub fast float -0.000000e+00, %1335
  %1337 = fmul fast float %1067, %1332
  %1338 = fsub fast float -0.000000e+00, %1337
  br label %1339

; <label>:1339                                    ; preds = %1311, %939
  %1340 = phi float [ %1334, %1311 ], [ 0.000000e+00, %939 ]
  %1341 = phi float [ %1336, %1311 ], [ 0.000000e+00, %939 ]
  %1342 = phi float [ %1338, %1311 ], [ 0.000000e+00, %939 ]
  %1343 = fmul fast float %525, %829
  %1344 = fmul fast float %526, %829
  %1345 = fmul fast float %527, %829
  %1346 = fmul fast float %1343, %1340
  %1347 = fmul fast float %1344, %1341
  %1348 = fmul fast float %1345, %1342
  br label %1349

; <label>:1349                                    ; preds = %1339, %828, %520
  %1350 = phi float [ %1346, %1339 ], [ 0.000000e+00, %828 ], [ 0.000000e+00, %520 ]
  %1351 = phi float [ %1347, %1339 ], [ 0.000000e+00, %828 ], [ 0.000000e+00, %520 ]
  %1352 = phi float [ %1348, %1339 ], [ 0.000000e+00, %828 ], [ 0.000000e+00, %520 ]
  %1353 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %17, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %1354 = extractvalue %dx.types.CBufRet.f32 %1353, 3
  %1355 = fsub fast float -0.000000e+00, %166
  %1356 = fsub fast float -0.000000e+00, %167
  %1357 = fsub fast float -0.000000e+00, %168
  %1358 = fcmp fast ult float %1354, 0.000000e+00
  br i1 %1358, label %1408, label %1359

; <label>:1359                                    ; preds = %1349
  %1360 = fmul fast float %171, %1357
  %1361 = fmul fast float %172, %1356
  %1362 = fsub fast float %1360, %1361
  %1363 = fmul fast float %172, %1355
  %1364 = fmul fast float %170, %1357
  %1365 = fsub fast float %1363, %1364
  %1366 = fmul fast float %170, %1356
  %1367 = fmul fast float %171, %1355
  %1368 = fsub fast float %1366, %1367
  %1369 = call float @dx.op.dot3.f32(i32 55, float %1362, float %1365, float %1368, float %1362, float %1365, float %1368)  ; Dot3(ax,ay,az,bx,by,bz)
  %1370 = call float @dx.op.unary.f32(i32 25, float %1369)  ; Rsqrt(value)
  %1371 = fmul fast float %1370, %1362
  %1372 = fmul fast float %1370, %1365
  %1373 = fmul fast float %1370, %1368
  %1374 = fmul fast float %1371, %201
  %1375 = call float @dx.op.tertiary.f32(i32 46, float %202, float %1372, float %1374)  ; FMad(a,b,c)
  %1376 = call float @dx.op.tertiary.f32(i32 46, float %203, float %1373, float %1375)  ; FMad(a,b,c)
  %1377 = fmul fast float %201, %170
  %1378 = call float @dx.op.tertiary.f32(i32 46, float %202, float %171, float %1377)  ; FMad(a,b,c)
  %1379 = call float @dx.op.tertiary.f32(i32 46, float %203, float %172, float %1378)  ; FMad(a,b,c)
  %1380 = call float @dx.op.dot3.f32(i32 55, float %201, float %202, float %203, float %1355, float %1356, float %1357)  ; Dot3(ax,ay,az,bx,by,bz)
  %1381 = call float @dx.op.unary.f32(i32 16, float %1380)  ; Asin(value)
  %1382 = fmul fast float %1381, 0x3FD45F3060000000
  %1383 = fadd fast float %1382, 5.000000e-01
  %1384 = fsub fast float -0.000000e+00, %1376
  %1385 = fsub fast float -0.000000e+00, %1379
  %1386 = fdiv fast float %1385, %1384
  %1387 = call float @dx.op.unary.f32(i32 17, float %1386)  ; Atan(value)
  %1388 = fadd fast float %1387, 0x400921FB60000000
  %1389 = fadd fast float %1387, 0xC00921FB60000000
  %1390 = fcmp ogt float %1376, -0.000000e+00
  %1391 = fcmp oeq float %1376, -0.000000e+00
  %1392 = fcmp ole float %1379, -0.000000e+00
  %1393 = fcmp ogt float %1379, -0.000000e+00
  %1394 = and i1 %1390, %1392
  %1395 = select i1 %1394, float %1388, float %1387
  %1396 = and i1 %1390, %1393
  %1397 = select i1 %1396, float %1389, float %1395
  %1398 = and i1 %1391, %1393
  %1399 = and i1 %1391, %1392
  %1400 = fmul fast float %1397, 0x3FC45F3060000000
  %1401 = fadd fast float %1400, 5.000000e-01
  %1402 = select i1 %1398, float 2.500000e-01, float %1401
  %1403 = select i1 %1399, float 7.500000e-01, float %1402
  %1404 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 7, i32 265 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<F32>
  %1405 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1406 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1404, %dx.types.Handle %1405, float %1383, float %1403, float %1354, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1407 = extractvalue %dx.types.ResRet.f32 %1406, 0
  br label %1408

; <label>:1408                                    ; preds = %1359, %1349
  %1409 = phi float [ %1407, %1359 ], [ 1.000000e+00, %1349 ]
  %1410 = uitofp i32 %76 to float
  %1411 = fmul fast float %1410, 0x3F70101020000000
  %1412 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %18, i32 136)  ; CBufferLoadLegacy(handle,regIndex)
  %1413 = extractvalue %dx.types.CBufRet.f32 %1412, 1
  %1414 = fmul fast float %1350, %1411
  %1415 = fmul fast float %1414, %1409
  %1416 = fmul fast float %1415, %1413
  %1417 = fmul fast float %1351, %1411
  %1418 = fmul fast float %1417, %1409
  %1419 = fmul fast float %1418, %1413
  %1420 = fmul fast float %1352, %1411
  %1421 = fmul fast float %1420, %1409
  %1422 = fmul fast float %1421, %1413
  br label %1423

; <label>:1423                                    ; preds = %1408, %0
  %1424 = phi float [ 0.000000e+00, %0 ], [ %1416, %1408 ]
  %1425 = phi float [ 0.000000e+00, %0 ], [ %1419, %1408 ]
  %1426 = phi float [ 0.000000e+00, %0 ], [ %1422, %1408 ]
  %1427 = phi float [ 0.000000e+00, %0 ], [ %1411, %1408 ]
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %1424)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %1425)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %1426)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %1427)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!27}
!dx.entryPoints = !{!28}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"ps", i32 6, i32 6}
!4 = !{!5, null, !18, !23}
!5 = !{!6, !8, !9, !10, !11, !12, !14, !16, !17}
!6 = !{i32 0, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 4, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{i32 1, %"class.Texture2DArray<float>"* undef, !"", i32 0, i32 1, i32 1, i32 7, i32 0, !7}
!9 = !{i32 2, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 2, i32 0, !7}
!10 = !{i32 3, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 2, i32 0, !7}
!11 = !{i32 4, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 4, i32 1, i32 2, i32 0, !7}
!12 = !{i32 5, %"class.StructuredBuffer<FPackedHairSample>"* undef, !"", i32 0, i32 5, i32 1, i32 12, i32 0, !13}
!13 = !{i32 1, i32 20}
!14 = !{i32 6, %"class.Buffer<vector<unsigned int, 2> >"* undef, !"", i32 0, i32 6, i32 1, i32 10, i32 0, !15}
!15 = !{i32 0, i32 5}
!16 = !{i32 7, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 7, i32 1, i32 2, i32 0, !7}
!17 = !{i32 8, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 8, i32 1, i32 10, i32 0, !15}
!18 = !{!19, !20, !21, !22}
!19 = !{i32 0, %_RootShaderParameters* undef, !"", i32 0, i32 0, i32 1, i32 224, null}
!20 = !{i32 1, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 1, i32 1, i32 5388, null}
!21 = !{i32 2, %UniformBufferConstants_DeferredLightUniforms* undef, !"", i32 0, i32 2, i32 1, i32 160, null}
!22 = !{i32 3, %UniformBufferConstants_HairStrands* undef, !"", i32 0, i32 3, i32 1, i32 132, null}
!23 = !{!24, !25, !26}
!24 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!25 = !{i32 1, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!26 = !{i32 2, %struct.SamplerState* undef, !"", i32 0, i32 2, i32 1, i32 0, null}
!27 = !{[9 x i32] [i32 7, i32 4, i32 15, i32 15, i32 0, i32 0, i32 15, i32 15, i32 0]}
!28 = !{void ()* @DeferredLightPixelMain, !"DeferredLightPixelMain", !29, !4, !40}
!29 = !{!30, !37, null}
!30 = !{!31, !34, !36}
!31 = !{i32 0, !"SV_Position", i8 9, i8 3, !32, i8 4, i32 1, i8 4, i32 0, i8 0, !33}
!32 = !{i32 0}
!33 = !{i32 3, i32 3}
!34 = !{i32 1, !"DISPATCH_NODECOUNT", i8 5, i8 0, !32, i8 1, i32 1, i8 1, i32 1, i8 0, !35}
!35 = !{i32 3, i32 1}
!36 = !{i32 2, !"DISPATCH_RESOLUTION", i8 5, i8 0, !32, i8 1, i32 1, i8 2, i32 1, i8 1, !35}
!37 = !{!38}
!38 = !{i32 0, !"SV_Target", i8 9, i8 16, !32, i8 0, i32 1, i8 4, i32 0, i8 0, !39}
!39 = !{i32 3, i32 15}
!40 = !{i32 0, i64 16, i32 5, !32}
!41 = distinct !{!41, !"dx.controlflow.hints", i32 1}
!42 = distinct !{!42, !"dx.controlflow.hints", i32 1}
!43 = distinct !{!43, !"dx.controlflow.hints", i32 1}
!44 = distinct !{!44, !"dx.controlflow.hints", i32 1}
