;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Position              0   xyzw        0      POS   float   xy  
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Target                0   xy          0   TARGET    uint   xy  
; SV_Target                1   xyzw        1   TARGET   float   xyzw
; SV_Depth                 0    N/A   oDepth    DEPTH   float    YES
;
; shader hash: b01299ee56846f977bd9afb50c4dc5df
;
; Pipeline Runtime Information: 
;
; Pixel Shader
; DepthOutput=1
; SampleFrequency=0
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Position              0          noperspective       
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Target                0                              
; SV_Target                1                              
; SV_Depth                 0                              
;
; Buffer Definitions:
;
; cbuffer _RootShaderParameters
; {
;
;   struct _RootShaderParameters
;   {
;
;       uint4 PageConstants;                          ; Offset:   32
;   
;   } _RootShaderParameters;                          ; Offset:    0 Size:    48
;
; }
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_TranslatedWorldToSubpixelClip;; Offset:   64
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:  128
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  192
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  256
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  320
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  384
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  448
;       row_major float4x4 View_ViewToClip;           ; Offset:  512
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  576
;       row_major float4x4 View_ClipToView;           ; Offset:  640
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  768
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  832
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  896
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  960
;       float3 View_ViewTilePosition;                 ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_MatrixTilePosition;               ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_ViewForward;                      ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float3 View_ViewUp;                           ; Offset: 1072
;       float PrePadding_View_1084;                   ; Offset: 1084
;       float3 View_ViewRight;                        ; Offset: 1088
;       float PrePadding_View_1100;                   ; Offset: 1100
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_HMDViewNoRollRight;               ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1136
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1152
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1168
;       float PrePadding_View_1180;                   ; Offset: 1180
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1184
;       float PrePadding_View_1196;                   ; Offset: 1196
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1200
;       float PrePadding_View_1212;                   ; Offset: 1212
;       float3 View_RelativePreViewTranslation;       ; Offset: 1216
;       float PrePadding_View_1228;                   ; Offset: 1228
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1232
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1360
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1424
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1488
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1552
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1616
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1680
;       float PrePadding_View_1692;                   ; Offset: 1692
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1696
;       float PrePadding_View_1708;                   ; Offset: 1708
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1712
;       float PrePadding_View_1724;                   ; Offset: 1724
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1728
;       float PrePadding_View_1740;                   ; Offset: 1740
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1744
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1808
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1872
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1936
;       float4 View_TemporalAAJitter;                 ; Offset: 2000
;       float4 View_GlobalClippingPlane;              ; Offset: 2016
;       float2 View_FieldOfViewWideAngles;            ; Offset: 2032
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 2040
;       float4 View_ViewRectMin;                      ; Offset: 2048
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2064
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2080
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2096
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2112
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2128
;       float4 View_ScreenToViewSpace;                ; Offset: 2144
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2160
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2168
;       int View_NumSceneColorMSAASamples;            ; Offset: 2176
;       float View_PreExposure;                       ; Offset: 2180
;       float View_OneOverPreExposure;                ; Offset: 2184
;       float PrePadding_View_2188;                   ; Offset: 2188
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2192
;       float4 View_SpecularOverrideParameter;        ; Offset: 2208
;       float4 View_NormalOverrideParameter;          ; Offset: 2224
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2240
;       float View_PrevFrameGameTime;                 ; Offset: 2248
;       float View_PrevFrameRealTime;                 ; Offset: 2252
;       float View_OutOfBoundsMask;                   ; Offset: 2256
;       float PrePadding_View_2260;                   ; Offset: 2260
;       float PrePadding_View_2264;                   ; Offset: 2264
;       float PrePadding_View_2268;                   ; Offset: 2268
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2272
;       float View_CullingSign;                       ; Offset: 2284
;       float View_NearPlane;                         ; Offset: 2288
;       float View_GameTime;                          ; Offset: 2292
;       float View_RealTime;                          ; Offset: 2296
;       float View_DeltaTime;                         ; Offset: 2300
;       float View_MaterialTextureMipBias;            ; Offset: 2304
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2308
;       uint View_Random;                             ; Offset: 2312
;       uint View_FrameNumber;                        ; Offset: 2316
;       uint View_StateFrameIndexMod8;                ; Offset: 2320
;       uint View_StateFrameIndex;                    ; Offset: 2324
;       uint View_DebugViewModeMask;                  ; Offset: 2328
;       uint View_WorldIsPaused;                      ; Offset: 2332
;       float View_CameraCut;                         ; Offset: 2336
;       float View_UnlitViewmodeMask;                 ; Offset: 2340
;       float PrePadding_View_2344;                   ; Offset: 2344
;       float PrePadding_View_2348;                   ; Offset: 2348
;       float4 View_DirectionalLightColor;            ; Offset: 2352
;       float3 View_DirectionalLightDirection;        ; Offset: 2368
;       float PrePadding_View_2380;                   ; Offset: 2380
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2384
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2416
;       float4 View_TemporalAAParams;                 ; Offset: 2448
;       float4 View_CircleDOFParams;                  ; Offset: 2464
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2480
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2484
;       float View_DepthOfFieldScale;                 ; Offset: 2488
;       float View_DepthOfFieldFocalLength;           ; Offset: 2492
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2496
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2500
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2504
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2508
;       float View_GeneralPurposeTweak;               ; Offset: 2512
;       float View_GeneralPurposeTweak2;              ; Offset: 2516
;       float View_DemosaicVposOffset;                ; Offset: 2520
;       float View_DecalDepthBias;                    ; Offset: 2524
;       float3 View_IndirectLightingColorScale;       ; Offset: 2528
;       float PrePadding_View_2540;                   ; Offset: 2540
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2544
;       float PrePadding_View_2556;                   ; Offset: 2556
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2560
;       float PrePadding_View_2572;                   ; Offset: 2572
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2576
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2608
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2640
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2672
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2704
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2736
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2752
;       float PrePadding_View_2764;                   ; Offset: 2764
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2768
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2784
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2848
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2864
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2868
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2872
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2876
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2880
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2896
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2900
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2904
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2908
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2912
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2916
;       float PrePadding_View_2920;                   ; Offset: 2920
;       float PrePadding_View_2924;                   ; Offset: 2924
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2928
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2940
;       float View_RealTimeReflectionCapture;         ; Offset: 2944
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2948
;       float PrePadding_View_2952;                   ; Offset: 2952
;       float PrePadding_View_2956;                   ; Offset: 2956
;       float4 View_AmbientCubemapTint;               ; Offset: 2960
;       float View_AmbientCubemapIntensity;           ; Offset: 2976
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2980
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2984
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2988
;       float4 View_SkyLightColor;                    ; Offset: 2992
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 3008
;       float View_MobilePreviewMode;                 ; Offset: 3136
;       float View_HMDEyePaddingOffset;               ; Offset: 3140
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3144
;       float View_ShowDecalsMask;                    ; Offset: 3148
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3152
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3156
;       float PrePadding_View_3160;                   ; Offset: 3160
;       float PrePadding_View_3164;                   ; Offset: 3164
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3168
;       int View_StereoPassIndex;                     ; Offset: 3180
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3184
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3280
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3376
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3472
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3568
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3572
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3576
;       int PrePadding_View_3580;                     ; Offset: 3580
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3584
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3600
;       float View_GlobalVolumeDimension;             ; Offset: 3612
;       float View_GlobalVolumeTexelSize;             ; Offset: 3616
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3620
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3624
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3628
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3632
;       float View_NotCoveredMinStepScale;            ; Offset: 3636
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3640
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3644
;       int2 View_CursorPosition;                     ; Offset: 3648
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3656
;       float PrePadding_View_3660;                   ; Offset: 3660
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3664
;       float PrePadding_View_3676;                   ; Offset: 3676
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3680
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3696
;       float2 View_VolumetricFogScreenUVToHistoryVolumeUV;; Offset: 3704
;       float View_VolumetricFogMaxDistance;          ; Offset: 3712
;       float PrePadding_View_3716;                   ; Offset: 3716
;       float PrePadding_View_3720;                   ; Offset: 3720
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3728
;       float PrePadding_View_3740;                   ; Offset: 3740
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3744
;       float PrePadding_View_3756;                   ; Offset: 3756
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3760
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3772
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3776
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3788
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3792
;       float PrePadding_View_3796;                   ; Offset: 3796
;       float PrePadding_View_3800;                   ; Offset: 3800
;       float PrePadding_View_3804;                   ; Offset: 3804
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3808
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3840
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3844
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3848
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3852
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3856
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3860
;       uint PrePadding_View_3864;                    ; Offset: 3864
;       uint PrePadding_View_3868;                    ; Offset: 3868
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3872
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3888
;       float PrePadding_View_3896;                   ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3904
;       float View_OverrideLandscapeLOD;              ; Offset: 3920
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3924
;       float View_MinRoughness;                      ; Offset: 3928
;       float PrePadding_View_3932;                   ; Offset: 3932
;       float4 View_HairRenderInfo;                   ; Offset: 3936
;       uint View_EnableSkyLight;                     ; Offset: 3952
;       uint View_HairRenderInfoBits;                 ; Offset: 3956
;       uint View_HairComponents;                     ; Offset: 3960
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3964
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3968
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3984
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 4000
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 4012
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4016
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4020
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4024
;       int View_PhysicsFieldTargetCount;             ; Offset: 4028
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4032
;       uint View_InstanceSceneDataSOAStride;         ; Offset: 4544
;       uint View_GPUSceneViewId;                     ; Offset: 4548
;       float View_ViewResolutionFraction;            ; Offset: 4552
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4556
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4560
;       uint PrePadding_View_4564;                    ; Offset: 4564
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4568
;       uint PrePadding_View_4572;                    ; Offset: 4572
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4576
;       uint PrePadding_View_4580;                    ; Offset: 4580
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4584
;       uint PrePadding_View_4588;                    ; Offset: 4588
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4592
;       uint PrePadding_View_4596;                    ; Offset: 4596
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4600
;       uint PrePadding_View_4604;                    ; Offset: 4604
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessResource_View_PrimitiveSceneData;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessResource_View_InstanceSceneData; ; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessResource_View_InstancePayloadData;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessResource_View_LightmapSceneData; ; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessResource_View_LTCMatTexture;     ; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessSampler_View_LTCMatSampler;      ; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessResource_View_LTCAmpTexture;     ; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessSampler_View_LTCAmpSampler;      ; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint View_bShadingEnergyConservation;         ; Offset: 5104
;       uint View_bShadingEnergyPreservation;         ; Offset: 5108
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5160
;       uint PrePadding_View_5164;                    ; Offset: 5164
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessResource_View_WaterData;         ; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint PrePadding_View_5208;                    ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5216
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5232
;       float PrePadding_View_5236;                   ; Offset: 5236
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint PrePadding_View_5256;                    ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5264
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       uint BindlessResource_View_EditorVisualizeLevelInstanceIds;; Offset: 5328
;       uint PrePadding_View_5332;                    ; Offset: 5332
;       uint BindlessResource_View_EditorSelectedHitProxyIds;; Offset: 5336
;       uint PrePadding_View_5340;                    ; Offset: 5340
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5344
;       uint PrePadding_View_5348;                    ; Offset: 5348
;       uint PrePadding_View_5352;                    ; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5360
;       float PrePadding_View_5372;                   ; Offset: 5372
;       float3 View_TLASViewTilePosition;             ; Offset: 5376
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5388
;
; }
;
; Resource bind info for View_PrimitiveSceneData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for View_InstanceSceneData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for View_InstancePayloadData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for InViews
; {
;
;   struct hostlayout.struct.FPackedNaniteView
;   {
;
;       row_major float4x4 SVPositionToTranslatedWorld;; Offset:    0
;       row_major float4x4 ViewToTranslatedWorld;     ; Offset:   64
;       row_major float4x4 TranslatedWorldToView;     ; Offset:  128
;       row_major float4x4 TranslatedWorldToClip;     ; Offset:  192
;       row_major float4x4 TranslatedWorldToSubpixelClip;; Offset:  256
;       row_major float4x4 ViewToClip;                ; Offset:  320
;       row_major float4x4 ClipToRelativeWorld;       ; Offset:  384
;       row_major float4x4 PrevTranslatedWorldToView; ; Offset:  448
;       row_major float4x4 PrevTranslatedWorldToClip; ; Offset:  512
;       row_major float4x4 PrevViewToClip;            ; Offset:  576
;       row_major float4x4 PrevClipToRelativeWorld;   ; Offset:  640
;       int4 ViewRect;                                ; Offset:  704
;       float4 ViewSizeAndInvSize;                    ; Offset:  720
;       float4 ClipSpaceScaleOffset;                  ; Offset:  736
;       float3 RelativePreViewTranslation;            ; Offset:  752
;       float ViewTilePositionX;                      ; Offset:  764
;       float3 RelativePrevPreViewTranslation;        ; Offset:  768
;       float ViewTilePositionY;                      ; Offset:  780
;       float3 RelativeWorldCameraOrigin;             ; Offset:  784
;       float ViewTilePositionZ;                      ; Offset:  796
;       float3 DrawDistanceOriginTranslatedWorld;     ; Offset:  800
;       float RangeBasedCullingDistance;              ; Offset:  812
;       float3 ViewForward;                           ; Offset:  816
;       float NearPlane;                              ; Offset:  828
;       float4 TranslatedGlobalClipPlane;             ; Offset:  832
;       float3 MatrixTilePosition;                    ; Offset:  848
;       float Padding1;                               ; Offset:  860
;       float2 LODScales;                             ; Offset:  864
;       float MinBoundsRadiusSq;                      ; Offset:  872
;       uint StreamingPriorityCategory_AndFlags;      ; Offset:  876
;       int4 TargetLayerIdX_AndMipLevelY_AndNumMipLevelsZ;; Offset:  880
;       int4 HZBTestViewRect;                         ; Offset:  896
;   
;   } $Element;                                       ; Offset:    0 Size:   912
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _RootShaderParameters             cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_View       cbuffer      NA          NA     CB1            cb1     1
; View_PrimitiveSceneData           texture  struct         r/o      T0             t0     1
; View_InstanceSceneData            texture  struct         r/o      T1             t1     1
; View_InstancePayloadData          texture  struct         r/o      T2             t2     1
; ClusterPageData                   texture    byte         r/o      T3             t3     1
; VisibleClustersSWHW               texture    byte         r/o      T4             t4     1
; InViews                           texture  struct         r/o      T5             t5     1
; MaterialSlotTable                 texture    byte         r/o      T6             t6     1
; VisBuffer64                       texture     u32          2d      T7             t7     1
;
;
; ViewId state:
;
; Number of inputs: 4, outputs: 8
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1 }
;   output 1 depends on inputs: { 0, 1 }
;   output 4 depends on inputs: { 0, 1 }
;   output 5 depends on inputs: { 0, 1 }
;   output 6 depends on inputs: { 0, 1 }
;   output 7 depends on inputs: { 0, 1 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%"class.StructuredBuffer<vector<float, 4> >" = type { <4 x float> }
%struct.ByteAddressBuffer = type { i32 }
%"hostlayout.class.StructuredBuffer<FPackedNaniteView>" = type { %hostlayout.struct.FPackedNaniteView }
%hostlayout.struct.FPackedNaniteView = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x i32>, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <3 x float>, float, <2 x float>, float, i32, <4 x i32>, <4 x i32> }
%"class.Texture2D<unsigned long long>" = type { i64, %"class.Texture2D<unsigned long long>::mips_type" }
%"class.Texture2D<unsigned long long>::mips_type" = type { i32 }
%_RootShaderParameters = type { <4 x i32> }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, float, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }

define void @EmitSceneDepthPS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %12 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %13 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %14 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 524, i32 912 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=912>
  %15 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %14, i32 0, i32 512, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %16 = extractvalue %dx.types.ResRet.f32 %15, 0
  %17 = extractvalue %dx.types.ResRet.f32 %15, 1
  %18 = extractvalue %dx.types.ResRet.f32 %15, 2
  %19 = extractvalue %dx.types.ResRet.f32 %15, 3
  %20 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %14, i32 0, i32 528, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %21 = extractvalue %dx.types.ResRet.f32 %20, 0
  %22 = extractvalue %dx.types.ResRet.f32 %20, 1
  %23 = extractvalue %dx.types.ResRet.f32 %20, 2
  %24 = extractvalue %dx.types.ResRet.f32 %20, 3
  %25 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %14, i32 0, i32 544, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %26 = extractvalue %dx.types.ResRet.f32 %25, 0
  %27 = extractvalue %dx.types.ResRet.f32 %25, 1
  %28 = extractvalue %dx.types.ResRet.f32 %25, 2
  %29 = extractvalue %dx.types.ResRet.f32 %25, 3
  %30 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %14, i32 0, i32 560, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %31 = extractvalue %dx.types.ResRet.f32 %30, 0
  %32 = extractvalue %dx.types.ResRet.f32 %30, 1
  %33 = extractvalue %dx.types.ResRet.f32 %30, 2
  %34 = extractvalue %dx.types.ResRet.f32 %30, 3
  %35 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %14, i32 0, i32 764, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %36 = extractvalue %dx.types.ResRet.f32 %35, 0
  %37 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %14, i32 0, i32 768, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %38 = extractvalue %dx.types.ResRet.f32 %37, 0
  %39 = extractvalue %dx.types.ResRet.f32 %37, 1
  %40 = extractvalue %dx.types.ResRet.f32 %37, 2
  %41 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %14, i32 0, i32 780, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %42 = extractvalue %dx.types.ResRet.f32 %41, 0
  %43 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %14, i32 0, i32 796, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %44 = extractvalue %dx.types.ResRet.f32 %43, 0
  %45 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %11, i32 125)  ; CBufferLoadLegacy(handle,regIndex)
  %46 = extractvalue %dx.types.CBufRet.f32 %45, 0
  %47 = extractvalue %dx.types.CBufRet.f32 %45, 1
  %48 = extractvalue %dx.types.CBufRet.f32 %45, 2
  %49 = extractvalue %dx.types.CBufRet.f32 %45, 3
  %50 = fptoui float %12 to i32
  %51 = fptoui float %13 to i32
  %52 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %53 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %52, i32 0, i32 %50, i32 %51, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %54 = extractvalue %dx.types.ResRet.i32 %53, 0
  %55 = extractvalue %dx.types.ResRet.i32 %53, 1
  %56 = lshr i32 %54, 7
  %57 = and i32 %54, 127
  %58 = icmp eq i32 %56, 0
  br i1 %58, label %743, label %59

; <label>:59                                      ; preds = %0
  %60 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 13, i32 48 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %61 = shl nuw nsw i32 %56, 3
  %62 = add nsw i32 %61, -8
  %63 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %64 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %63, i32 %62, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %65 = extractvalue %dx.types.ResRet.i32 %64, 0
  %66 = extractvalue %dx.types.ResRet.i32 %64, 1
  %67 = lshr i32 %65, 16
  %68 = and i32 %66, 16777215
  %69 = lshr i32 %66, 24
  %70 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %60, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %71 = extractvalue %dx.types.CBufRet.i32 %70, 0
  %72 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %73 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %72, i32 %68, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %74 = extractvalue %dx.types.ResRet.f32 %73, 0
  %75 = bitcast float %74 to i32
  %76 = and i32 %75, 1048575
  %77 = lshr i32 %75, 20
  %78 = extractvalue %dx.types.ResRet.f32 %73, 1
  %79 = bitcast float %78 to i32
  %80 = and i32 %79, 16777215
  %81 = mul nuw nsw i32 %76, 41
  %82 = add nuw nsw i32 %81, 26
  %83 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %84 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %83, i32 %82, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %85 = extractvalue %dx.types.ResRet.f32 %84, 3
  %86 = bitcast float %85 to i32
  %87 = add nuw nsw i32 %81, 27
  %88 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %83, i32 %87, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %89 = extractvalue %dx.types.ResRet.f32 %88, 3
  %90 = bitcast float %89 to i32
  %91 = mul i32 %90, %80
  %92 = and i32 %77, 64
  %93 = icmp ne i32 %92, 0
  %94 = and i32 %77, 8
  %95 = and i32 %77, 160
  %96 = icmp ne i32 %95, 0
  %97 = zext i1 %96 to i32
  %98 = select i1 %93, i32 2, i32 %97
  %99 = add i32 %86, %98
  %100 = add i32 %99, %91
  %101 = add nuw nsw i32 %81, 1
  %102 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %83, i32 %101, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %103 = extractvalue %dx.types.ResRet.f32 %102, 0
  %104 = extractvalue %dx.types.ResRet.f32 %102, 1
  %105 = extractvalue %dx.types.ResRet.f32 %102, 2
  %106 = add nuw nsw i32 %81, 14
  %107 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %83, i32 %106, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %108 = extractvalue %dx.types.ResRet.f32 %107, 0
  %109 = extractvalue %dx.types.ResRet.f32 %107, 1
  %110 = extractvalue %dx.types.ResRet.f32 %107, 2
  %111 = add nuw nsw i32 %81, 15
  %112 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %83, i32 %111, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %113 = extractvalue %dx.types.ResRet.f32 %112, 0
  %114 = extractvalue %dx.types.ResRet.f32 %112, 1
  %115 = extractvalue %dx.types.ResRet.f32 %112, 2
  %116 = add nuw nsw i32 %81, 16
  %117 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %83, i32 %116, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %118 = extractvalue %dx.types.ResRet.f32 %117, 0
  %119 = extractvalue %dx.types.ResRet.f32 %117, 1
  %120 = extractvalue %dx.types.ResRet.f32 %117, 2
  %121 = add i32 %71, %68
  %122 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %72, i32 %121, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %123 = extractvalue %dx.types.ResRet.f32 %122, 0
  %124 = extractvalue %dx.types.ResRet.f32 %122, 1
  %125 = extractvalue %dx.types.ResRet.f32 %122, 2
  %126 = extractvalue %dx.types.ResRet.f32 %122, 3
  %127 = bitcast float %123 to i32
  %128 = bitcast float %124 to i32
  %129 = bitcast float %125 to i32
  %130 = bitcast float %126 to i32
  %131 = shl i32 %71, 1
  %132 = add i32 %131, %68
  %133 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %72, i32 %132, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %134 = extractvalue %dx.types.ResRet.f32 %133, 0
  %135 = extractvalue %dx.types.ResRet.f32 %133, 1
  %136 = extractvalue %dx.types.ResRet.f32 %133, 2
  %137 = and i32 %127, 65535
  %138 = uitofp i32 %137 to float
  %139 = lshr i32 %127, 16
  %140 = uitofp i32 %139 to float
  %141 = and i32 %128, 32767
  %142 = uitofp i32 %141 to float
  %143 = fadd fast float %138, -3.276800e+04
  %144 = fadd fast float %140, -3.276800e+04
  %145 = fadd fast float %142, -1.638400e+04
  %146 = fmul fast float %145, 0x3F06A0F8E0000000
  %147 = and i32 %128, 32768
  %148 = icmp ne i32 %147, 0
  %149 = fadd fast float %143, %144
  %150 = fmul fast float %149, 0x3F00002000000000
  %151 = fsub fast float %143, %144
  %152 = fmul fast float %151, 0x3F00002000000000
  %153 = call float @dx.op.unary.f32(i32 6, float %150)  ; FAbs(value)
  %154 = call float @dx.op.unary.f32(i32 6, float %152)  ; FAbs(value)
  %155 = call float @dx.op.dot2.f32(i32 54, float 1.000000e+00, float 1.000000e+00, float %153, float %154)  ; Dot2(ax,ay,bx,by)
  %156 = fsub fast float 2.000000e+00, %155
  %157 = call float @dx.op.dot3.f32(i32 55, float %150, float %152, float %156, float %150, float %152, float %156)  ; Dot3(ax,ay,az,bx,by,bz)
  %158 = call float @dx.op.unary.f32(i32 25, float %157)  ; Rsqrt(value)
  %159 = fmul fast float %158, %150
  %160 = fmul fast float %158, %152
  %161 = fmul fast float %158, %156
  %162 = fadd fast float %161, 1.000000e+00
  %163 = fdiv fast float 1.000000e+00, %162
  %164 = fmul fast float %160, %159
  %165 = fmul fast float %164, %163
  %166 = fsub fast float -0.000000e+00, %165
  %167 = fmul fast float %159, %159
  %168 = fmul fast float %167, %163
  %169 = fsub fast float 1.000000e+00, %168
  %170 = fmul fast float %160, %160
  %171 = fmul fast float %170, %163
  %172 = fsub fast float 1.000000e+00, %171
  %173 = fmul fast float %146, %146
  %174 = fsub fast float 1.000000e+00, %173
  %175 = call float @dx.op.unary.f32(i32 24, float %174)  ; Sqrt(value)
  %176 = select i1 %148, float %146, float %175
  %177 = select i1 %148, float %175, float %146
  %178 = fmul fast float %169, %176
  %179 = fmul fast float %176, %166
  %180 = fmul fast float %176, %159
  %181 = fmul fast float %177, %166
  %182 = fmul fast float %172, %177
  %183 = fmul fast float %160, %177
  %184 = fsub fast float -0.000000e+00, %183
  %185 = fadd fast float %178, %181
  %186 = fadd fast float %179, %182
  %187 = fsub fast float %184, %180
  %188 = fmul fast float %187, %160
  %189 = fmul fast float %186, %161
  %190 = fsub fast float %188, %189
  %191 = fmul fast float %185, %161
  %192 = fmul fast float %187, %159
  %193 = fsub fast float %191, %192
  %194 = fmul fast float %186, %159
  %195 = fmul fast float %185, %160
  %196 = fsub fast float %194, %195
  %197 = lshr i32 %130, 16
  %198 = shl i32 %197, 23
  %199 = add i32 %198, -125829120
  %200 = bitcast i32 %199 to float
  %201 = lshr i32 %129, 16
  %202 = and i32 %129, 65535
  %203 = and i32 %130, 65535
  %204 = uitofp i32 %202 to float
  %205 = uitofp i32 %201 to float
  %206 = uitofp i32 %203 to float
  %207 = fadd fast float %204, -3.276800e+04
  %208 = fadd fast float %205, -3.276800e+04
  %209 = fadd fast float %206, -3.276800e+04
  %210 = fmul fast float %200, %207
  %211 = fmul fast float %200, %208
  %212 = fmul fast float %200, %209
  %213 = fmul fast float %185, %210
  %214 = fmul fast float %186, %210
  %215 = fmul fast float %187, %210
  %216 = fmul fast float %190, %211
  %217 = fmul fast float %193, %211
  %218 = fmul fast float %196, %211
  %219 = fmul fast float %159, %212
  %220 = fmul fast float %160, %212
  %221 = fmul fast float %161, %212
  %222 = call float @dx.op.unary.f32(i32 6, float %210)  ; FAbs(value)
  %223 = call float @dx.op.unary.f32(i32 6, float %211)  ; FAbs(value)
  %224 = call float @dx.op.unary.f32(i32 6, float %212)  ; FAbs(value)
  %225 = fdiv fast float 1.000000e+00, %222
  %226 = fdiv fast float 1.000000e+00, %223
  %227 = fdiv fast float 1.000000e+00, %224
  %228 = fmul fast float %225, %225
  %229 = fmul fast float %213, %228
  %230 = fmul fast float %214, %228
  %231 = fmul fast float %228, %215
  %232 = fmul fast float %226, %226
  %233 = fmul fast float %216, %232
  %234 = fmul fast float %217, %232
  %235 = fmul fast float %218, %232
  %236 = fmul fast float %227, %227
  %237 = fmul fast float %236, %219
  %238 = fmul fast float %236, %220
  %239 = fmul fast float %236, %221
  %240 = fsub fast float -0.000000e+00, %134
  %241 = fsub fast float -0.000000e+00, %135
  %242 = fsub fast float -0.000000e+00, %136
  %243 = fmul fast float %229, %240
  %244 = call float @dx.op.tertiary.f32(i32 46, float %241, float %230, float %243)  ; FMad(a,b,c)
  %245 = call float @dx.op.tertiary.f32(i32 46, float %242, float %231, float %244)  ; FMad(a,b,c)
  %246 = fmul fast float %233, %240
  %247 = call float @dx.op.tertiary.f32(i32 46, float %241, float %234, float %246)  ; FMad(a,b,c)
  %248 = call float @dx.op.tertiary.f32(i32 46, float %242, float %235, float %247)  ; FMad(a,b,c)
  %249 = fmul fast float %237, %240
  %250 = call float @dx.op.tertiary.f32(i32 46, float %241, float %238, float %249)  ; FMad(a,b,c)
  %251 = call float @dx.op.tertiary.f32(i32 46, float %242, float %239, float %250)  ; FMad(a,b,c)
  %252 = icmp eq i32 %100, -1
  %253 = icmp eq i32 %94, 0
  %254 = or i1 %253, %252
  br i1 %254, label %356, label %255, !dx.controlflow.hints !35

; <label>:255                                     ; preds = %59
  %256 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %257 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %256, i32 %100, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %258 = extractvalue %dx.types.ResRet.f32 %257, 0
  %259 = extractvalue %dx.types.ResRet.f32 %257, 1
  %260 = extractvalue %dx.types.ResRet.f32 %257, 2
  %261 = extractvalue %dx.types.ResRet.f32 %257, 3
  %262 = bitcast float %258 to i32
  %263 = bitcast float %259 to i32
  %264 = bitcast float %260 to i32
  %265 = bitcast float %261 to i32
  %266 = add i32 %100, 1
  %267 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %256, i32 %266, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %268 = extractvalue %dx.types.ResRet.f32 %267, 0
  %269 = extractvalue %dx.types.ResRet.f32 %267, 1
  %270 = extractvalue %dx.types.ResRet.f32 %267, 2
  %271 = and i32 %262, 65535
  %272 = uitofp i32 %271 to float
  %273 = lshr i32 %262, 16
  %274 = uitofp i32 %273 to float
  %275 = and i32 %263, 32767
  %276 = uitofp i32 %275 to float
  %277 = fadd fast float %272, -3.276800e+04
  %278 = fadd fast float %274, -3.276800e+04
  %279 = fadd fast float %276, -1.638400e+04
  %280 = fmul fast float %279, 0x3F06A0F8E0000000
  %281 = and i32 %263, 32768
  %282 = icmp ne i32 %281, 0
  %283 = fadd fast float %277, %278
  %284 = fmul fast float %283, 0x3F00002000000000
  %285 = fsub fast float %277, %278
  %286 = fmul fast float %285, 0x3F00002000000000
  %287 = call float @dx.op.unary.f32(i32 6, float %284)  ; FAbs(value)
  %288 = call float @dx.op.unary.f32(i32 6, float %286)  ; FAbs(value)
  %289 = call float @dx.op.dot2.f32(i32 54, float 1.000000e+00, float 1.000000e+00, float %287, float %288)  ; Dot2(ax,ay,bx,by)
  %290 = fsub fast float 2.000000e+00, %289
  %291 = call float @dx.op.dot3.f32(i32 55, float %284, float %286, float %290, float %284, float %286, float %290)  ; Dot3(ax,ay,az,bx,by,bz)
  %292 = call float @dx.op.unary.f32(i32 25, float %291)  ; Rsqrt(value)
  %293 = fmul fast float %292, %284
  %294 = fmul fast float %292, %286
  %295 = fmul fast float %292, %290
  %296 = fadd fast float %295, 1.000000e+00
  %297 = fdiv fast float 1.000000e+00, %296
  %298 = fmul fast float %294, %293
  %299 = fmul fast float %298, %297
  %300 = fsub fast float -0.000000e+00, %299
  %301 = fmul fast float %293, %293
  %302 = fmul fast float %301, %297
  %303 = fsub fast float 1.000000e+00, %302
  %304 = fmul fast float %294, %294
  %305 = fmul fast float %304, %297
  %306 = fsub fast float 1.000000e+00, %305
  %307 = fmul fast float %280, %280
  %308 = fsub fast float 1.000000e+00, %307
  %309 = call float @dx.op.unary.f32(i32 24, float %308)  ; Sqrt(value)
  %310 = select i1 %282, float %280, float %309
  %311 = select i1 %282, float %309, float %280
  %312 = fmul fast float %303, %310
  %313 = fmul fast float %310, %300
  %314 = fmul fast float %310, %293
  %315 = fmul fast float %311, %300
  %316 = fmul fast float %306, %311
  %317 = fmul fast float %294, %311
  %318 = fsub fast float -0.000000e+00, %317
  %319 = fadd fast float %312, %315
  %320 = fadd fast float %313, %316
  %321 = fsub fast float %318, %314
  %322 = fmul fast float %321, %294
  %323 = fmul fast float %320, %295
  %324 = fsub fast float %322, %323
  %325 = fmul fast float %319, %295
  %326 = fmul fast float %321, %293
  %327 = fsub fast float %325, %326
  %328 = fmul fast float %320, %293
  %329 = fmul fast float %319, %294
  %330 = fsub fast float %328, %329
  %331 = lshr i32 %265, 16
  %332 = shl i32 %331, 23
  %333 = add i32 %332, -125829120
  %334 = bitcast i32 %333 to float
  %335 = lshr i32 %264, 16
  %336 = and i32 %264, 65535
  %337 = and i32 %265, 65535
  %338 = uitofp i32 %336 to float
  %339 = uitofp i32 %335 to float
  %340 = uitofp i32 %337 to float
  %341 = fadd fast float %338, -3.276800e+04
  %342 = fadd fast float %339, -3.276800e+04
  %343 = fadd fast float %340, -3.276800e+04
  %344 = fmul fast float %334, %341
  %345 = fmul fast float %334, %342
  %346 = fmul fast float %334, %343
  %347 = fmul fast float %319, %344
  %348 = fmul fast float %320, %344
  %349 = fmul fast float %321, %344
  %350 = fmul fast float %324, %345
  %351 = fmul fast float %327, %345
  %352 = fmul fast float %330, %345
  %353 = fmul fast float %293, %346
  %354 = fmul fast float %294, %346
  %355 = fmul fast float %295, %346
  br label %399

; <label>:356                                     ; preds = %59
  %357 = extractvalue %dx.types.ResRet.f32 %117, 3
  %358 = extractvalue %dx.types.ResRet.f32 %112, 3
  %359 = extractvalue %dx.types.ResRet.f32 %107, 3
  %360 = fmul fast float %213, %108
  %361 = call float @dx.op.tertiary.f32(i32 46, float %214, float %109, float %360)  ; FMad(a,b,c)
  %362 = call float @dx.op.tertiary.f32(i32 46, float %215, float %110, float %361)  ; FMad(a,b,c)
  %363 = fmul fast float %213, %113
  %364 = call float @dx.op.tertiary.f32(i32 46, float %214, float %114, float %363)  ; FMad(a,b,c)
  %365 = call float @dx.op.tertiary.f32(i32 46, float %215, float %115, float %364)  ; FMad(a,b,c)
  %366 = fmul fast float %213, %118
  %367 = call float @dx.op.tertiary.f32(i32 46, float %214, float %119, float %366)  ; FMad(a,b,c)
  %368 = call float @dx.op.tertiary.f32(i32 46, float %215, float %120, float %367)  ; FMad(a,b,c)
  %369 = fmul fast float %216, %108
  %370 = call float @dx.op.tertiary.f32(i32 46, float %217, float %109, float %369)  ; FMad(a,b,c)
  %371 = call float @dx.op.tertiary.f32(i32 46, float %218, float %110, float %370)  ; FMad(a,b,c)
  %372 = fmul fast float %216, %113
  %373 = call float @dx.op.tertiary.f32(i32 46, float %217, float %114, float %372)  ; FMad(a,b,c)
  %374 = call float @dx.op.tertiary.f32(i32 46, float %218, float %115, float %373)  ; FMad(a,b,c)
  %375 = fmul fast float %216, %118
  %376 = call float @dx.op.tertiary.f32(i32 46, float %217, float %119, float %375)  ; FMad(a,b,c)
  %377 = call float @dx.op.tertiary.f32(i32 46, float %218, float %120, float %376)  ; FMad(a,b,c)
  %378 = fmul fast float %219, %108
  %379 = call float @dx.op.tertiary.f32(i32 46, float %220, float %109, float %378)  ; FMad(a,b,c)
  %380 = call float @dx.op.tertiary.f32(i32 46, float %221, float %110, float %379)  ; FMad(a,b,c)
  %381 = fmul fast float %219, %113
  %382 = call float @dx.op.tertiary.f32(i32 46, float %220, float %114, float %381)  ; FMad(a,b,c)
  %383 = call float @dx.op.tertiary.f32(i32 46, float %221, float %115, float %382)  ; FMad(a,b,c)
  %384 = fmul fast float %219, %118
  %385 = call float @dx.op.tertiary.f32(i32 46, float %220, float %119, float %384)  ; FMad(a,b,c)
  %386 = call float @dx.op.tertiary.f32(i32 46, float %221, float %120, float %385)  ; FMad(a,b,c)
  %387 = fmul fast float %134, %108
  %388 = call float @dx.op.tertiary.f32(i32 46, float %135, float %109, float %387)  ; FMad(a,b,c)
  %389 = call float @dx.op.tertiary.f32(i32 46, float %136, float %110, float %388)  ; FMad(a,b,c)
  %390 = fadd fast float %389, %359
  %391 = fmul fast float %134, %113
  %392 = call float @dx.op.tertiary.f32(i32 46, float %135, float %114, float %391)  ; FMad(a,b,c)
  %393 = call float @dx.op.tertiary.f32(i32 46, float %136, float %115, float %392)  ; FMad(a,b,c)
  %394 = fadd fast float %393, %358
  %395 = fmul fast float %134, %118
  %396 = call float @dx.op.tertiary.f32(i32 46, float %135, float %119, float %395)  ; FMad(a,b,c)
  %397 = call float @dx.op.tertiary.f32(i32 46, float %136, float %120, float %396)  ; FMad(a,b,c)
  %398 = fadd fast float %397, %357
  br label %399

; <label>:399                                     ; preds = %356, %255
  %400 = phi float [ %347, %255 ], [ %362, %356 ]
  %401 = phi float [ %348, %255 ], [ %365, %356 ]
  %402 = phi float [ %349, %255 ], [ %368, %356 ]
  %403 = phi float [ %350, %255 ], [ %371, %356 ]
  %404 = phi float [ %351, %255 ], [ %374, %356 ]
  %405 = phi float [ %352, %255 ], [ %377, %356 ]
  %406 = phi float [ %353, %255 ], [ %380, %356 ]
  %407 = phi float [ %354, %255 ], [ %383, %356 ]
  %408 = phi float [ %355, %255 ], [ %386, %356 ]
  %409 = phi float [ %268, %255 ], [ %390, %356 ]
  %410 = phi float [ %269, %255 ], [ %394, %356 ]
  %411 = phi float [ %270, %255 ], [ %398, %356 ]
  %412 = extractvalue %dx.types.CBufRet.i32 %70, 1
  %413 = call i32 @dx.op.binary.i32(i32 40, i32 %67, i32 %412)  ; UMin(a,b)
  %414 = shl i32 %413, 17
  %415 = sub nsw i32 %67, %412
  %416 = call i32 @dx.op.binary.i32(i32 37, i32 %415, i32 0)  ; IMax(a,b)
  %417 = shl i32 %416, 15
  %418 = add i32 %417, %414
  %419 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %420 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %419, i32 %418, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %421 = extractvalue %dx.types.ResRet.i32 %420, 0
  %422 = shl nuw nsw i32 %69, 4
  %423 = or i32 %418, %422
  %424 = mul i32 %421, 80
  %425 = add nsw i32 %423, 16
  %426 = add i32 %425, %424
  %427 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %419, i32 %426, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %428 = extractvalue %dx.types.ResRet.i32 %427, 3
  %429 = icmp ult i32 %428, -33554432
  br i1 %429, label %430, label %440, !dx.controlflow.hints !36

; <label>:430                                     ; preds = %399
  %431 = and i32 %428, 63
  %432 = lshr i32 %428, 6
  %433 = and i32 %432, 63
  %434 = lshr i32 %428, 12
  %435 = and i32 %434, 63
  %436 = lshr i32 %428, 18
  %437 = and i32 %436, 127
  %438 = add nuw nsw i32 %437, 1
  %439 = lshr i32 %428, 25
  br label %446

; <label>:440                                     ; preds = %399
  %441 = lshr i32 %428, 19
  %442 = and i32 %441, 63
  %443 = add nuw nsw i32 %442, 1
  %444 = shl i32 %428, 2
  %445 = and i32 %444, 2097148
  br label %446

; <label>:446                                     ; preds = %440, %430
  %447 = phi i32 [ %435, %430 ], [ 0, %440 ]
  %448 = phi i32 [ %433, %430 ], [ 0, %440 ]
  %449 = phi i32 [ %439, %430 ], [ 0, %440 ]
  %450 = phi i32 [ %431, %430 ], [ 0, %440 ]
  %451 = phi i32 [ %438, %430 ], [ 0, %440 ]
  %452 = phi i32 [ 0, %430 ], [ %443, %440 ]
  %453 = phi i32 [ 0, %430 ], [ %445, %440 ]
  %454 = icmp eq i32 %451, 0
  br i1 %454, label %461, label %455, !dx.controlflow.hints !37

; <label>:455                                     ; preds = %446
  %456 = icmp ult i32 %57, %451
  br i1 %456, label %486, label %457

; <label>:457                                     ; preds = %455
  %458 = add nsw i32 %451, %449
  %459 = icmp ult i32 %57, %458
  %460 = select i1 %459, i32 %448, i32 %447
  br label %486

; <label>:461                                     ; preds = %446
  %462 = icmp eq i32 %452, 0
  br i1 %462, label %486, label %463

; <label>:463                                     ; preds = %461
  %464 = add i32 %453, %418
  br label %465

; <label>:465                                     ; preds = %480, %463
  %466 = phi i32 [ %481, %480 ], [ %464, %463 ]
  %467 = phi i32 [ %482, %480 ], [ 0, %463 ]
  %468 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %469 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %468, i32 %466, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %470 = extractvalue %dx.types.ResRet.i32 %469, 0
  %471 = and i32 %470, 255
  %472 = lshr i32 %470, 8
  %473 = and i32 %472, 255
  %474 = lshr i32 %470, 16
  %475 = and i32 %474, 63
  %476 = icmp uge i32 %57, %471
  %477 = add nuw nsw i32 %473, %471
  %478 = icmp ult i32 %57, %477
  %479 = and i1 %476, %478
  br i1 %479, label %484, label %480

; <label>:480                                     ; preds = %465
  %481 = add i32 %466, 4
  %482 = add nuw i32 %467, 1
  %483 = icmp ult i32 %482, %452
  br i1 %483, label %465, label %484, !llvm.loop !38

; <label>:484                                     ; preds = %480, %465
  %485 = phi i32 [ -1, %480 ], [ %475, %465 ]
  br label %486

; <label>:486                                     ; preds = %484, %461, %457, %455
  %487 = phi i32 [ %450, %455 ], [ -1, %461 ], [ %460, %457 ], [ %485, %484 ]
  %488 = shl nuw nsw i32 %76, 6
  %489 = add nsw i32 %487, %488
  %490 = shl nsw i32 %489, 3
  %491 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %492 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %491, i32 %490, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %493 = extractvalue %dx.types.ResRet.i32 %492, 1
  %494 = lshr i32 %493, 16
  br i1 %454, label %501, label %495, !dx.controlflow.hints !37

; <label>:495                                     ; preds = %486
  %496 = icmp ult i32 %57, %451
  br i1 %496, label %526, label %497

; <label>:497                                     ; preds = %495
  %498 = add nsw i32 %451, %449
  %499 = icmp ult i32 %57, %498
  %500 = select i1 %499, i32 %448, i32 %447
  br label %526

; <label>:501                                     ; preds = %486
  %502 = icmp eq i32 %452, 0
  br i1 %502, label %526, label %503

; <label>:503                                     ; preds = %501
  %504 = add i32 %453, %418
  br label %505

; <label>:505                                     ; preds = %520, %503
  %506 = phi i32 [ %521, %520 ], [ %504, %503 ]
  %507 = phi i32 [ %522, %520 ], [ 0, %503 ]
  %508 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %509 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %508, i32 %506, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %510 = extractvalue %dx.types.ResRet.i32 %509, 0
  %511 = and i32 %510, 255
  %512 = lshr i32 %510, 8
  %513 = and i32 %512, 255
  %514 = lshr i32 %510, 16
  %515 = and i32 %514, 63
  %516 = icmp uge i32 %57, %511
  %517 = add nuw nsw i32 %513, %511
  %518 = icmp ult i32 %57, %517
  %519 = and i1 %516, %518
  br i1 %519, label %524, label %520

; <label>:520                                     ; preds = %505
  %521 = add i32 %506, 4
  %522 = add nuw i32 %507, 1
  %523 = icmp ult i32 %522, %452
  br i1 %523, label %505, label %524, !llvm.loop !38

; <label>:524                                     ; preds = %520, %505
  %525 = phi i32 [ -1, %520 ], [ %515, %505 ]
  br label %526

; <label>:526                                     ; preds = %524, %501, %497, %495
  %527 = phi i32 [ %450, %495 ], [ -1, %501 ], [ %500, %497 ], [ %525, %524 ]
  %528 = add nsw i32 %527, %488
  %529 = shl nsw i32 %528, 3
  %530 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %491, i32 %529, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %531 = extractvalue %dx.types.ResRet.i32 %530, 0
  %532 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %83, i32 %81, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %533 = extractvalue %dx.types.ResRet.f32 %532, 0
  %534 = bitcast float %533 to i32
  %535 = and i32 %534, 8
  %536 = icmp eq i32 %535, 0
  br i1 %536, label %542, label %537

; <label>:537                                     ; preds = %526
  %538 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %11, i32 196)  ; CBufferLoadLegacy(handle,regIndex)
  %539 = extractvalue %dx.types.CBufRet.f32 %538, 3
  %540 = fcmp fast ogt float %539, 0.000000e+00
  %541 = select i1 %540, i32 262144, i32 0
  br label %542

; <label>:542                                     ; preds = %537, %526
  %543 = phi i32 [ 0, %526 ], [ %541, %537 ]
  %544 = lshr i32 %534, 10
  %545 = and i32 %544, 14
  %546 = lshr i32 %531, 12
  %547 = and i32 %546, 262128
  %548 = shl i32 %534, 12
  %549 = and i32 %548, 524288
  %550 = or i32 %547, %543
  %551 = or i32 %550, %549
  %552 = or i32 %551, %545
  %553 = or i32 %552, 1
  call void @dx.op.storeOutput.i32(i32 5, i32 0, i32 0, i8 0, i32 %553)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.i32(i32 5, i32 0, i32 0, i8 1, i32 %494)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  %554 = and i32 %65, 8
  %555 = icmp eq i32 %554, 0
  br i1 %555, label %556, label %563

; <label>:556                                     ; preds = %542
  %557 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %558 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %557, i32 %81, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %559 = extractvalue %dx.types.ResRet.f32 %558, 0
  %560 = bitcast float %559 to i32
  %561 = and i32 %560, 32
  %562 = icmp ne i32 %561, 0
  br label %563

; <label>:563                                     ; preds = %556, %542
  %564 = phi i1 [ false, %542 ], [ %562, %556 ]
  %565 = bitcast i32 %55 to float
  br i1 %564, label %566, label %741

; <label>:566                                     ; preds = %563
  %567 = fsub fast float %103, %36
  %568 = fsub fast float %104, %42
  %569 = fsub fast float %105, %44
  %570 = fmul fast float %567, 2.097152e+06
  %571 = fmul fast float %568, 2.097152e+06
  %572 = fmul fast float %569, 2.097152e+06
  %573 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %11, i32 128)  ; CBufferLoadLegacy(handle,regIndex)
  %574 = extractvalue %dx.types.CBufRet.f32 %573, 0
  %575 = extractvalue %dx.types.CBufRet.f32 %573, 1
  %576 = fsub fast float %12, %574
  %577 = fsub fast float %13, %575
  %578 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %11, i32 129)  ; CBufferLoadLegacy(handle,regIndex)
  %579 = extractvalue %dx.types.CBufRet.f32 %578, 2
  %580 = extractvalue %dx.types.CBufRet.f32 %578, 3
  %581 = fmul fast float %576, %579
  %582 = fmul fast float %577, %580
  %583 = fadd fast float %581, -5.000000e-01
  %584 = fadd fast float %582, -5.000000e-01
  %585 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %11, i32 48)  ; CBufferLoadLegacy(handle,regIndex)
  %586 = extractvalue %dx.types.CBufRet.f32 %585, 0
  %587 = extractvalue %dx.types.CBufRet.f32 %585, 1
  %588 = extractvalue %dx.types.CBufRet.f32 %585, 2
  %589 = extractvalue %dx.types.CBufRet.f32 %585, 3
  %590 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %11, i32 49)  ; CBufferLoadLegacy(handle,regIndex)
  %591 = extractvalue %dx.types.CBufRet.f32 %590, 0
  %592 = extractvalue %dx.types.CBufRet.f32 %590, 1
  %593 = extractvalue %dx.types.CBufRet.f32 %590, 2
  %594 = extractvalue %dx.types.CBufRet.f32 %590, 3
  %595 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %11, i32 50)  ; CBufferLoadLegacy(handle,regIndex)
  %596 = extractvalue %dx.types.CBufRet.f32 %595, 0
  %597 = extractvalue %dx.types.CBufRet.f32 %595, 1
  %598 = extractvalue %dx.types.CBufRet.f32 %595, 2
  %599 = extractvalue %dx.types.CBufRet.f32 %595, 3
  %600 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %11, i32 51)  ; CBufferLoadLegacy(handle,regIndex)
  %601 = extractvalue %dx.types.CBufRet.f32 %600, 0
  %602 = extractvalue %dx.types.CBufRet.f32 %600, 1
  %603 = extractvalue %dx.types.CBufRet.f32 %600, 2
  %604 = extractvalue %dx.types.CBufRet.f32 %600, 3
  %605 = fmul fast float %586, %12
  %606 = call float @dx.op.tertiary.f32(i32 46, float %13, float %591, float %605)  ; FMad(a,b,c)
  %607 = call float @dx.op.tertiary.f32(i32 46, float %565, float %596, float %606)  ; FMad(a,b,c)
  %608 = fadd fast float %607, %601
  %609 = fmul fast float %587, %12
  %610 = call float @dx.op.tertiary.f32(i32 46, float %13, float %592, float %609)  ; FMad(a,b,c)
  %611 = call float @dx.op.tertiary.f32(i32 46, float %565, float %597, float %610)  ; FMad(a,b,c)
  %612 = fadd fast float %611, %602
  %613 = fmul fast float %588, %12
  %614 = call float @dx.op.tertiary.f32(i32 46, float %13, float %593, float %613)  ; FMad(a,b,c)
  %615 = call float @dx.op.tertiary.f32(i32 46, float %565, float %598, float %614)  ; FMad(a,b,c)
  %616 = fadd fast float %615, %603
  %617 = fmul fast float %589, %12
  %618 = call float @dx.op.tertiary.f32(i32 46, float %13, float %594, float %617)  ; FMad(a,b,c)
  %619 = call float @dx.op.tertiary.f32(i32 46, float %565, float %599, float %618)  ; FMad(a,b,c)
  %620 = fadd fast float %619, %604
  %621 = fdiv fast float %608, %620
  %622 = fdiv fast float %612, %620
  %623 = fdiv fast float %616, %620
  %624 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %11, i32 64)  ; CBufferLoadLegacy(handle,regIndex)
  %625 = extractvalue %dx.types.CBufRet.f32 %624, 0
  %626 = extractvalue %dx.types.CBufRet.f32 %624, 1
  %627 = extractvalue %dx.types.CBufRet.f32 %624, 2
  %628 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %11, i32 76)  ; CBufferLoadLegacy(handle,regIndex)
  %629 = extractvalue %dx.types.CBufRet.f32 %628, 0
  %630 = extractvalue %dx.types.CBufRet.f32 %628, 1
  %631 = extractvalue %dx.types.CBufRet.f32 %628, 2
  %632 = fsub fast float %621, %629
  %633 = fsub fast float %622, %630
  %634 = fsub fast float %623, %631
  %635 = fsub fast float %625, %103
  %636 = fsub fast float %626, %104
  %637 = fsub fast float %627, %105
  %638 = fmul fast float %635, 2.097152e+06
  %639 = fmul fast float %636, 2.097152e+06
  %640 = fmul fast float %637, 2.097152e+06
  %641 = fadd fast float %638, %632
  %642 = fadd fast float %639, %633
  %643 = fadd fast float %640, %634
  %644 = fmul fast float %641, %229
  %645 = fmul fast float %641, %233
  %646 = fmul fast float %641, %237
  %647 = fmul fast float %642, %230
  %648 = fmul fast float %642, %234
  %649 = fmul fast float %642, %238
  %650 = fmul fast float %643, %231
  %651 = fmul fast float %643, %235
  %652 = fmul fast float %643, %239
  %653 = fadd fast float %647, %245
  %654 = fadd fast float %653, %644
  %655 = fadd fast float %654, %650
  %656 = fadd fast float %648, %248
  %657 = fadd fast float %656, %645
  %658 = fadd fast float %657, %651
  %659 = fadd fast float %649, %251
  %660 = fadd fast float %659, %646
  %661 = fadd fast float %660, %652
  %662 = fmul fast float %655, %400
  %663 = call float @dx.op.tertiary.f32(i32 46, float %658, float %403, float %662)  ; FMad(a,b,c)
  %664 = call float @dx.op.tertiary.f32(i32 46, float %661, float %406, float %663)  ; FMad(a,b,c)
  %665 = fadd fast float %570, %38
  %666 = fadd fast float %665, %409
  %667 = fadd fast float %666, %664
  %668 = fmul fast float %655, %401
  %669 = call float @dx.op.tertiary.f32(i32 46, float %658, float %404, float %668)  ; FMad(a,b,c)
  %670 = call float @dx.op.tertiary.f32(i32 46, float %661, float %407, float %669)  ; FMad(a,b,c)
  %671 = fadd fast float %571, %39
  %672 = fadd fast float %671, %410
  %673 = fadd fast float %672, %670
  %674 = fmul fast float %655, %402
  %675 = call float @dx.op.tertiary.f32(i32 46, float %658, float %405, float %674)  ; FMad(a,b,c)
  %676 = call float @dx.op.tertiary.f32(i32 46, float %661, float %408, float %675)  ; FMad(a,b,c)
  %677 = fadd fast float %572, %40
  %678 = fadd fast float %677, %411
  %679 = fadd fast float %678, %676
  %680 = fmul fast float %667, %16
  %681 = call float @dx.op.tertiary.f32(i32 46, float %673, float %21, float %680)  ; FMad(a,b,c)
  %682 = call float @dx.op.tertiary.f32(i32 46, float %679, float %26, float %681)  ; FMad(a,b,c)
  %683 = fadd fast float %682, %31
  %684 = fmul fast float %667, %17
  %685 = call float @dx.op.tertiary.f32(i32 46, float %673, float %22, float %684)  ; FMad(a,b,c)
  %686 = call float @dx.op.tertiary.f32(i32 46, float %679, float %27, float %685)  ; FMad(a,b,c)
  %687 = fadd fast float %686, %32
  %688 = fmul fast float %667, %18
  %689 = call float @dx.op.tertiary.f32(i32 46, float %673, float %23, float %688)  ; FMad(a,b,c)
  %690 = call float @dx.op.tertiary.f32(i32 46, float %679, float %28, float %689)  ; FMad(a,b,c)
  %691 = fadd fast float %690, %33
  %692 = fmul fast float %667, %19
  %693 = call float @dx.op.tertiary.f32(i32 46, float %673, float %24, float %692)  ; FMad(a,b,c)
  %694 = call float @dx.op.tertiary.f32(i32 46, float %679, float %29, float %693)  ; FMad(a,b,c)
  %695 = fadd fast float %694, %34
  %696 = fmul fast float %583, 2.000000e+00
  %697 = fmul fast float %584, -2.000000e+00
  %698 = fsub fast float %696, %46
  %699 = fsub fast float %697, %47
  %700 = fdiv fast float %683, %695
  %701 = fdiv fast float %687, %695
  %702 = fsub fast float %700, %48
  %703 = fsub fast float %701, %49
  %704 = fdiv fast float %691, %695
  %705 = fsub fast float %698, %702
  %706 = fsub fast float %699, %703
  %707 = fsub fast float %565, %704
  %708 = fcmp fast ogt float %705, 0.000000e+00
  %709 = fcmp fast ogt float %706, 0.000000e+00
  %710 = fcmp fast olt float %705, 0.000000e+00
  %711 = fcmp fast olt float %706, 0.000000e+00
  %712 = zext i1 %708 to i32
  %713 = zext i1 %709 to i32
  %714 = zext i1 %710 to i32
  %715 = zext i1 %711 to i32
  %716 = sub nsw i32 %712, %714
  %717 = sub nsw i32 %713, %715
  %718 = sitofp i32 %716 to float
  %719 = sitofp i32 %717 to float
  %720 = call float @dx.op.unary.f32(i32 6, float %705)  ; FAbs(value)
  %721 = call float @dx.op.unary.f32(i32 6, float %706)  ; FAbs(value)
  %722 = call float @dx.op.unary.f32(i32 24, float %720)  ; Sqrt(value)
  %723 = call float @dx.op.unary.f32(i32 24, float %721)  ; Sqrt(value)
  %724 = fmul fast float %722, 0x3FD69508A0000000
  %725 = fmul fast float %724, %718
  %726 = fmul fast float %723, 0x3FD69508A0000000
  %727 = fmul fast float %726, %719
  %728 = fadd fast float %725, 0x3FDFFFE000000000
  %729 = fadd fast float %727, 0x3FDFFFE000000000
  %730 = bitcast float %707 to i32
  %731 = lshr i32 %730, 16
  %732 = uitofp i32 %731 to float
  %733 = fmul fast float %732, 0x3EF0001000000000
  %734 = fadd fast float %733, 0x3EB999B340000000
  %735 = call float @dx.op.unary.f32(i32 7, float %734)  ; Saturate(value)
  %736 = and i32 %730, 65535
  %737 = uitofp i32 %736 to float
  %738 = fmul fast float %737, 0x3EF0001000000000
  %739 = fadd fast float %738, 0x3EB999B340000000
  %740 = call float @dx.op.unary.f32(i32 7, float %739)  ; Saturate(value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %728)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %729)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %735)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %740)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  br label %742

; <label>:741                                     ; preds = %563
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  br label %742

; <label>:742                                     ; preds = %741, %566
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %565)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  br label %744

; <label>:743                                     ; preds = %0
  call void @dx.op.discard(i32 82, i1 true)  ; Discard(condition)
  br label %744

; <label>:744                                     ; preds = %743, %742
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.i32(i32, i32, i32, i8, i32) #1

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind
declare void @dx.op.discard(i32, i1) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!20}
!dx.entryPoints = !{!21}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"ps", i32 6, i32 6}
!4 = !{!5, null, !17, null}
!5 = !{!6, !8, !9, !10, !11, !12, !14, !15}
!6 = !{i32 0, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 12, i32 0, !7}
!7 = !{i32 1, i32 16}
!8 = !{i32 1, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 12, i32 0, !7}
!9 = !{i32 2, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 12, i32 0, !7}
!10 = !{i32 3, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 3, i32 1, i32 11, i32 0, null}
!11 = !{i32 4, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 4, i32 1, i32 11, i32 0, null}
!12 = !{i32 5, %"hostlayout.class.StructuredBuffer<FPackedNaniteView>"* undef, !"", i32 0, i32 5, i32 1, i32 12, i32 0, !13}
!13 = !{i32 1, i32 912}
!14 = !{i32 6, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 6, i32 1, i32 11, i32 0, null}
!15 = !{i32 7, %"class.Texture2D<unsigned long long>"* undef, !"", i32 0, i32 7, i32 1, i32 2, i32 0, !16}
!16 = !{i32 0, i32 5}
!17 = !{!18, !19}
!18 = !{i32 0, %_RootShaderParameters* undef, !"", i32 0, i32 0, i32 1, i32 48, null}
!19 = !{i32 1, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 1, i32 1, i32 5388, null}
!20 = !{[6 x i32] [i32 4, i32 8, i32 243, i32 243, i32 0, i32 0]}
!21 = !{void ()* @EmitSceneDepthPS, !"EmitSceneDepthPS", !22, !4, !34}
!22 = !{!23, !27, null}
!23 = !{!24}
!24 = !{i32 0, !"SV_Position", i8 9, i8 3, !25, i8 4, i32 1, i8 4, i32 0, i8 0, !26}
!25 = !{i32 0}
!26 = !{i32 3, i32 3}
!27 = !{!28, !29, !32}
!28 = !{i32 0, !"SV_Target", i8 5, i8 16, !25, i8 0, i32 1, i8 2, i32 0, i8 0, !26}
!29 = !{i32 1, !"SV_Target", i8 9, i8 16, !30, i8 0, i32 1, i8 4, i32 1, i8 0, !31}
!30 = !{i32 1}
!31 = !{i32 3, i32 15}
!32 = !{i32 2, !"SV_Depth", i8 9, i8 17, !25, i8 0, i32 1, i8 1, i32 -1, i8 -1, !33}
!33 = !{i32 3, i32 1}
!34 = !{i32 0, i64 16, i32 5, !25}
!35 = distinct !{!35, !"dx.controlflow.hints", i32 1}
!36 = distinct !{!36, !"dx.controlflow.hints", i32 1}
!37 = distinct !{!37, !"dx.controlflow.hints", i32 1}
!38 = distinct !{!38, !39}
!39 = !{!"llvm.loop.unroll.disable"}
